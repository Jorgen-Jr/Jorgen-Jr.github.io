{"data":{"site":{"siteMetadata":{"title":"Jorge.Room"}},"allMarkdownRemark":{"nodes":[{"id":"27b1a5a0-c444-5071-a786-9759c9373e66","html":"<p>Eu criei esse blog com o intuito de ajudar de alguma forma novos desenvolvedores com tutoriais incisivos sobre as tecnologias que uso, estou aprendendo a usar e pequenas dicas que posso compartilhar com o tempo sempre em formato textual, porque acredito que existem várias pessoas que assim como eu sentem mais facilidade em aprender e absorver conteúdo novo lendo.</p>\n<p>Pretendo cobrir esse blog com posts relacionados as seguintes categorias:</p>\n<ul>\n<li>Tutoriais</li>\n<li>Dicas</li>\n<li>Projetos</li>\n</ul>\n<p>Nos <strong>tutoriais</strong> pretendo explicar da forma mais completa, e podem sempre me consultar através de emails ou pela página de contato para criticar, comentar tirar duvidas e afins. Para as <strong>dicas</strong> serão pequenas dicas com snippets que podem ajudar no dia a dia em questão de produtividade e afins. E pretendo meus <strong>projetos</strong> expor ate o ponto que não vá ferir nenhum de meus stakeholders no quesito de privacidade e segurança nos quais participei, criei ou que são open-source que estarão sempre no meu <a href=\"https://github.com/Jorgen-Jr\">github</a> para consultas.</p>\n<p>Serei breve e deixo claro que assim como qualquer pessoa da nossa área ainda tenho muito a aprender, com a quantidade de coisas incrveis que a área de tecnologia nos possibilita fazer e dificl manter o foco ou aprender tudo o que desejamos aprender, mas possuo experiencias que desejo compartilhar e espero que meu conteúdo possa ajudar as pessoas de alguma forma ou outra.</p>\n<p>Grato pela sua visita.</p>","frontmatter":{"cover":"/images/uploads/pexels-photo-5759268.jpeg","date":"02/06/2021 13:24","isBanner":false,"layout":"post","special":false,"title":"Bem Vindo ao Meu Blog","category":"Aviso"},"fields":{"slug":"/blog/2021-05-05-bem-vindo-ao-meu-blog/"}},{"id":"132cc650-40f9-5506-bed1-74b20b2bb866","html":"<p>Há alguns meses atrás eu desenvolvi alguns bots para o telegram, sendo eles <strong>@ndefinitionbot</strong>, <strong>@whatsinthisfoodbot</strong>, <strong>@ntalesbot</strong> e <strong>@ntextifybot</strong>, no início eles rodavam na minha máquina local, em containers usando o docker, atualmente eles usam <em>serverless functions</em> para que se tornem mais disponíveis. Futuramente pretendo disponibilizar um tutorial de como foi o processo de desenvolvimento de um desses bots.</p>\n<p>Tenha em mente que por estar usando serverless functions alguns clientes podem sentir as conhecidas cold starts, mas do jeito que foi aplicado estão em níveis aceitáveis.</p>\n<p>Para usar bots embutidos (inline bots) é bem fácil no telegram, basta digitar a tag do bot e em seguida inserir sua query. Como mostra a imagem a seguir.</p>\n<p><img src=\"/images/uploads/imagem1.png\" alt=\"Resultados para a query &#x22;radio&#x22;\" title=\"Resultados para a query radio&#x27;\"></p>\n<p>E então selecionando o resultado que deseja, ele deve enviar para o recipiente o significado.</p>\n<p><img src=\"/images/uploads/imagem2.png\" alt=\"Resultado para o recipiente desejado.\" title=\"Resultado para o recipiente desejado.\"></p>\n<p>O <code class=\"language-text\">@ndefinitionbot</code> usa uma api que desenvolvi usando web scrappers que pode ser vista em <a href=\"https://github.com/Jorgen-Jr/TheDictApi\">The Dict Api</a> que mais a frente estará na lista dos projetos em meu portfolio.</p>\n<p>Tal api permite que possamos buscar resultados em formato json dos sites:</p>\n<ul>\n<li><a href=\"http://word.com\">Thesaurus</a>;</li>\n<li><a href=\"http://urbandictionary.com\">UrbanDictionary</a>;</li>\n<li><a href=\"https://dicionario.priberam.org\">Priberam</a>;</li>\n</ul>\n<p>Que atualmente são as opções de resultados para o bot.</p>","frontmatter":{"cover":"/images/uploads/bd81e85af9cc0febb2acb.jpg","date":"16/06/2021 15:15","isBanner":false,"layout":"post","special":false,"title":"Sobre nDefinitionBot","category":"bot"},"fields":{"slug":"/blog/2021-05-11-sobre-ndefinitionbot/"}},{"id":"51bf8bf9-be8b-592e-80f6-21e66bbc05e9","html":"<p>Veja como subir e configurar um ambiente simples com banco de dados e servidores para front-end e backend usando docker.</p>\n<blockquote>\n<p>Usando distros baseadas no Debian/Ubuntu (No meu caso estarei usando o ElementaryOS 5, mas também funciona para as outras distros)</p>\n</blockquote>\n<h2>Instalando o Docker</h2>\n<h3>Usando o Repositório Official do Docker</h3>\n<p>Para configurar o repositório, você precisa atualizar o <code class=\"language-text\">apt</code> e instalar os seguintes pacotes: <break></p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo apt-get update</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/01.png\" alt=\"Passo - 01\"></p>\n<p>E em seguida adcionar a chave GPG official do Docker.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/02.png\" alt=\"Passo - 02\"></p>\n<p>Você pode verificar se a chave foi adcionada pelo fingerprint <code class=\"language-text\">9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>, buscando pelos últimos 8 characteres. O resultado deve ser como a seguir:</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo apt-key fingerprint 0EBFCD88\n\npub   rsa4096 2017-02-22 [SCEA]\n      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   rsa4096 2017-02-22 [S]</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/03.png\" alt=\"Passo - 03\"></p>\n<p>Agora podemos adcionar o repositório dos lançamentos estáveis do Docker Engine. Através do comando:</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo add-apt-repository \\\n   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable&quot;</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Note que no caso do ElementaryOS eu precisei trocar a subfunção <code class=\"language-text\">$(lsb_release-cs)</code> que retorna a sua distribuição linux para <code class=\"language-text\">bionic</code>.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/04.png\" alt=\"Passo - 04\"></p>\n<p>Com o repositório instalado, atualize seu apt-get através do comando <code class=\"language-text\">sudo apt-get update</code> e instale o Docker Engine através do comando <code class=\"language-text\">sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/05.png\" alt=\"Passo - 05\"></p>\n<p>Você pode verificar que o docker está instalado através do comando <code class=\"language-text\">docker -vv</code>.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/06.png\" alt=\"Passo - 06\"></p>\n<p>Ou executando o comando <code class=\"language-text\">docker run hello-world</code> que deve baixar a imagem de teste e quando executa-la mostrar a seguinte mensagem.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/07.png\" alt=\"Passo - 07\"></p>\n<h3>Compose</h3>\n<p>Instale agora o docker compose através dos comandos:</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code>\n        </deckgo-highlight-code>\n<p>para baixar o docker-compose e</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo chmod +x /usr/local/bin/docker-compose</code>\n        </deckgo-highlight-code>\n<p>para torna-lo executável.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/09.png\" alt=\"Passo 8\"></p>\n<h2>Configurando o Ambiente através do YAML</h2>\n<p>O docker-compose permite o uso de scripts yaml, onde ditaremos as imagens e as propriedades de que ela deve rodar.<break>\nIrei criar uma pasta chamada <code class=\"language-text\">ambiente_de_testes</code> e dentro dela irei criar um arquivo <code class=\"language-text\">docker-compose.yml</code> para criarmos nosso ambiente.<break>\nNosso ambiente irá usar NodeJs, Postgres e Nginx, então de inicio podemos adcionar ao arquivo as seguintes propriedades.</p>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">version: &#39;3.4&#39;\nservices:\n  postgres:\n    image: postgres\n    container_name: srv_postgres\n    ports:\n      - &#39;5432:5432&#39;\n  nginx:\n    image: nginx\n    container_name: srv_nginx\n    ports:\n      - &#39;81:80&#39;\n  node:\n    image: &#39;node:slim&#39;\n    container_name: srv_node\n    depends_on:\n      - postgres</code>\n        </deckgo-highlight-code>\n<p>Definimos até então, quais serviços serão executados ao executar o comando do docker compose, em quais portas (com exceção do nodejs) e qual será o nome dos nossos containers. Mas podemos ir além, vamos definir agora os seus volumes, suas variáveis de ambiente e o comando para iniciar o servidor nodejs.</p>\n<blockquote>\n<p>Definir volumes é útil para poder armazenar os arquivos que a imagem irá usar, assim toda vez que o container precisar ser recriado estas informações não serão perdidas.\nPara definir o volume iremos usar no escopo da imagem <code class=\"language-text\">volumes: {endereço do volume}</code> onde será dividido em <code class=\"language-text\">{Diretório do volume}</code> + <code class=\"language-text\">{nome do volume}</code> + <code class=\"language-text\">{diretório do volume que deseja salvar}</code> e os nomes dos volumes devem ser definidos como a seguir.</p>\n</blockquote>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">version: &#39;3.4&#39;\nservices:\n  postgres:\n    image: postgres\n    container_name: srv_postgres\n    volumes:\n      - &#39;/home/jorge-n/ambiente_de_testes/var/lib/postgres:/var/lib/postgresql/&#39;\n    ports:\n      - &#39;5432:5432&#39;\n    environment:\n      - POSTGRES_DB= {database padrão de seu banco de dados}\n      - POSTGRES_PASSWORD= {Senha do usuário do banco de dados}\n      - POSTGRES_USER= {usuário a ser criado no banco ao inicia-lo}\n      - PGPORT=5432\n  nginx:\n    image: nginx\n    container_name: srv_nginx\n    volumes:\n      - &#39;/home/jorge-n/ambiente_de_testes/nginx/www:/usr/share/nginx/html/&#39;\n    ports:\n      - &#39;81:80&#39;\n    environment:\n      - NGINX_HOST={dominio onde irá rodar o servidor web}\n      - NGINX_PORT=80\n  node:\n    image: &#39;node:slim&#39;\n    container_name: srv_node\n    depends_on:\n      - postgres\n    volumes:\n      - &#39;/home/jorge-n/ambiente_de_testes/backend/node:/home/node/app&#39;\n    ports:\n      - &#39;34012:3001&#39;\n    working_dir: /home/node/app\n    environment:\n      - NODE_ENV=homolog\n      - PORT=3001\n      - SECRET_SESSION={Segredo da sessão (usado em autenticação)}\n      - DB_URI=postgres {endereço do banco de dados, aqui pode ser o nome do serviço}\n      - DB_USER={Usuário do banco que a aplicação irá usar}\n      - DB_PASSWORD={Senha do banco de dados}\n      - DB_DATABASE= {Database da aplicação}\n    expose:\n      - &#39;34012&#39;\n    command: bash -c &quot;npm install &amp;&amp; node src/server.js&quot; {Comando que será executado ao iniciar o servidor de aplicação}\nvolumes:\n  postgres: {}\n  www: {}\n  node: {}</code>\n        </deckgo-highlight-code>\n<p>Meu arquivo final ficou assim, mas você pode altera-lo conforme sua necessidade.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/08.png\" alt=\"Passo 8\"></p>\n<h3>Iniciando o ambiente de testes com Docker Compose.</h3>\n<p>Para iniciar o ambiente de testes, basta ir até a pasta onde está o arquivo <code class=\"language-text\">docker-compose.yml</code> e executar o comando <code class=\"language-text\">sudo docker-compose up</code> ele irá baixar as imagens dos containers necessárias e iniciar os serviços criando as pastas aonde definimos.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/10.png\" alt=\"Passo 9\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/11.png\" alt=\"Passo 10\"></p>\n<p>Agora basta copiar o código da nossa aplicação para as pastas criadas e reiniciar nosso ambiente rodando ele no fundo usando o comando <code class=\"language-text\">sudo docker-compose up -d</code>.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/12.png\" alt=\"Passo 11\"></p>\n<p>E voilla, tá pronto o sorvetinho. já podemos acessar a aplicação localmente.</p>\n<h2>Dockstation</h2>\n<p>Se você preferir usar uma interface para gerenciar seus containers, recomendo usar o <a href=\"https://dockstation.io/\">Dockstation</a>.</p>\n<h3>Importando</h3>\n<p>Como já possuimos um arquivo docker-composee.yml basta criar um novo projeto no Dockstation usando ele.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/13.png\" alt=\"Passo 12\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/14.png\" alt=\"Passo 13\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/15.png\" alt=\"Passo 14\"></p>\n<p>O Dockstation facilita o gerenciamento, te dando acesso aos logs, propriedades e várias informações sobre o projeto e os containers, alem de dispor um editor para modificar o código do compose.</p>\n<blockquote>\n<p>Note que você vai precisar remover os container criados anteriormente para poder usar os nomes usados em <code class=\"language-text\">container_name</code> no nosso arquivo compose.</p>\n</blockquote>\n<h2>Extra Bits</h2>\n<h3>React-Router Método 1</h3>\n<p>Uma configuração adcional é necessária para usar o react-router do reactjs no nginx. Para fazer isso através do docker, vamos entrar no container através do terminal usando o seguinte comando.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo docker exec -it srv_nginx /bin/bash</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/16.png\" alt=\"Passo 15\"></p>\n<p>Em seguida instale um editor de sua preferencia, eu usarei o nano.\nO arquivo que vamos modificar é o <code class=\"language-text\">default.conf</code> localizado em <code class=\"language-text\">/etc/nginx/config.d/default.conf</code> então irei usar o comando <code class=\"language-text\">nano /etc/nginx/conf.d/default.conf</code> para edita-lo.\nAdcione <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> dentro do escopo <code class=\"language-text\">location / {</code> como a seguir:</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/17.png\" alt=\"Passo 16\"></p>\n<p>Salve o arquivo e saia do container e o reinicie com <code class=\"language-text\">sudo docker container restart srv_nginx</code>. Isso deve resolver os problemas com react-router onde acabamos com uma página 404.</p>\n<h3>React-Router Método 2</h3>\n<p>Alternativamente, você pode salvar o arquivo conf em uma pasta separada no nosso projeto adcionando aos volumes do nginx a seguinte linha.</p>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">    - &#39;./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf&#39;</code>\n        </deckgo-highlight-code>\n<p>Assim poderá editar o arquivo direto na pasta do projeto adcionando a linha <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> dentro do escopo <code class=\"language-text\">location / {</code> como mostrado no método 1:</p>\n<h3>Erro 403 Nginx</h3>\n<p>Este erro usualmente é causado por falta de permissão aos arquivos na pasta que definimos. para resolver isso, vá até a pasta do projeto e execute o comando <code class=\"language-text\">sudo chmod 777 -R ./</code> para dar permissão de leitura, escrita e execução para todos o proprietário, grupo e todos os outros usuários.</p>","frontmatter":{"cover":"/images/uploads/pexels-pixabay-326410.jpg","date":"14/07/2021 14:07","isBanner":false,"layout":"post","special":false,"title":"Configurando Um Ambiente de Testes Simples com Docker","category":"Desenvolvimento"},"fields":{"slug":"/blog/2021-04-21-configurando-um-ambiente-de-testes-simples-com-docker/"}},{"id":"1384c8dd-2533-5228-b97f-62fe9829d9dc","html":"<p>A meses atrás criei um projeto usando o <strong>create-react-app</strong> e usei o <strong>react-router</strong> para lidar com as rotas da minha aplicação front-end, porém ao enviar minha build para o servidor, acabei sendo introduzido a um problema, quando o usuário entrava em uma rota e atualizar a página ou quando ele acessava através de um link externo ele retornava o erro 404, devido ao arquivo não ter sido encontrado no endereço requisitado, para resolver isso usei regras de redirecionamento no servidor. Espero que minha solução possa ajudar quem também passar por esse problema.</p>\n<h2>Resolvendo no Apache e servidores com suporte ao arquivo .htaccess</h2>\n<p>Basta criar uma rota de redirecionamento, como exemplificado abaixo, primeiro crie um arquivo <code class=\"language-text\">.httaccess</code> na pasta public do seu projeto react. É importante que este arquivo esteja na raiz quando for feito sua build.</p>\n<p><a href=\"https://gist.github.com/Jorgen-Jr/d4b19ad2d89b538e466c11a828fc36d8\">O arquivo exemplificado pode ser encontrado aqui.</a></p>\n<deckgo-highlight-code language=\"xml\"  >\n          <code slot=\"code\">&lt;IfModule mod_rewrite.c&gt;\n\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-l\n  RewriteRule . /index.html [L]\n\n&lt;/IfModule&gt;</code>\n        </deckgo-highlight-code>\n<h2>Resolvendo no NGINX com o arquivo de configuraçao nginx.conf</h2>\n<p>Acesse o arquivo de configuraço do seu nginx, normalmente localizado em /etc/nginx/conf.d/default.conf e adcione a linha <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> como a seguir:</p>\n<p>Observando que apenas a linha <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> foi alterada do meu arquivo de configuração padrão.\n<a href=\"https://gist.github.com/Jorgen-Jr/d639b2d0e9e72189e13539689e89aa39\">O mesmo pode ser encontrado aqui.</a></p>\n<deckgo-highlight-code language=\"textile\"  >\n          <code slot=\"code\">    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n\t    try_files $uri $uri/ /index.html;\n    }</code>\n        </deckgo-highlight-code>\n<h2>Resolvendo em servidores Netlify</h2>\n<p>Para resolver este tipo de erro ao subir em servidores do Netlify você precisa criar um arquivo <strong>_redirect</strong> na pasta public do seu projeto e adcionar a seguinte linha no arquivo. É importante que este arquivo esteja na raiz quando for feito sua build.</p>\n<p><a href=\"https://gist.github.com/Jorgen-Jr/7f866bfcb6c3a3f3b247101d515213a7\">O mesmo pode ser encontrado aqui.</a></p>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">/*    /index.html   404</code>\n        </deckgo-highlight-code>","frontmatter":{"cover":"/images/uploads/pexels-photo-14303.webp","date":"22/07/2021 13:52","isBanner":false,"layout":"post","special":false,"title":"Resolvendo o Erro 404 com React Router","category":"Extra Bit"},"fields":{"slug":"/blog/2021-05-20-erro-404-com-o-react-router/"}},{"id":"7b06e957-5978-53c0-85c0-76a645afba48","html":"<p>Async/Await parece ótimo porque evita o inferno do calback ou a pirâmide do terror por escrever um código assíncrono linha por linha de forma limpa.</p>\n<p>Neste post vou demonstrar através de exemplos o que é este inferno de callback, e algumas formas de tratar erros em métodos assíncronos.</p>\n<blockquote>\n<p>Exemplo do callback hell</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function hell(){\n\tstep1((a) =&gt; {\n\t\tstep2((b) =&gt; {\n\t\t\tstep3((c) =&gt; {\n\t\t\t\t//Bem Vindo\n\t\t\t})\n\t\t})\n\t})\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Exemplo de código assíncrono.</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function heaven(){\n\tconst a = await step1();\n\tconst b = await step2();\n\tconst c = await step3();\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Isto é… Até tivermos que lidar com tratamento de erros… Porque você pode acabar caindo na torre do terror do try catch, transformando seu código simples e limpo de linhas únicas em no mínimo mais 6 linhas de código.</p>\n<blockquote>\n<p>Exemplo da torre do terror (tower of terror)</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function towerOfTerror(){\n\tlet a;\n\tlet b;\n\tlet c;\n\t\n\ttry{\n\t\ta = await step1();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\t\n\ttry{\n\t\tb = await step2();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\ttry{\n\t\tc = await step3();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\t\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Nesses casos, a solução mais simples é simplesmente usar o catch no final de cada promise criada.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">\tawait step1().catch(fun);</code>\n        </deckgo-highlight-code>\n<p>Algo como:</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function gettingBetter(){\n\tconst a = await step1().catch(err =&gt; { handle(err) });\n\tconst b = await step2().catch(err =&gt; { handle(err) });\n\tconst c = await step3().catch(err =&gt; { handle(err) });\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>O que até que fica melhor porém ainda é repetitivo, uma outra opção é criar uma funcão onde exista apenas um bloco try catch para substituir todas as outras, como a seguir:</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function awessome(){\n\ttry{\n\t\tconst data = await promise;\t\t\n\t\treturn [data, null];\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn [null, error];\n\t}\n}</code>\n        </deckgo-highlight-code>\n<p>Assim quando a promessa for resolvida, ela devolverá um array com sua resposta e nulo se não houver erros, e se conter erros retornará um array com o primeiro índice nulo e o erro, assim podemos manter o código limpo linha por linha usando desestruturação e usar um if caso queira fazer outra coisa com o erro.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function main(){\n\tconst [ data, error ] = await awessome();\n\t\n\tif(error) { }\n\t\n\tconst [ data2, error2 ] = await awessome();\n\tconst [ data3, error3 ] = await awessome();\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Referência: <a href=\"https://www.youtube.com/watch?v=ITogH7lJTyE\">Fireship</a></p>","frontmatter":{"cover":"/images/uploads/pexels-photo-2557709.jpeg","date":"28/07/2021 15:02","isBanner":false,"layout":"post","special":false,"title":"Async/Await try-catch Infernal","category":"extra-bits"},"fields":{"slug":"/blog/2021-06-09-async-await-try-catch-infernal/"}},{"id":"6f3b10c0-9270-5a70-8a5e-5f7c5ee72aa2","html":"<p>Há vários meses atrás eu desenvolvi alguns bots apra o telegram, sendo eles <strong>`@ndefinitionbot`</strong>, <strong>`@whatsinthisfoodbot`</strong>, <strong>`@ntalesbot`</strong> e <strong>`@ntextifybot`</strong>, e recentemente migrei eles para usarem a arquitetura serverless para que se tornem mais disponíveis.</p>\n<p>Mantenha em mente que por estarem usando funções serverless na aws vocês podem expecienciar as tais chamadas <em>cold starts</em> e por isso… Minhas sinceras desculpas, estarei explicando o que cada bot faz e o que você pode esperar deles.</p>\n<h2>@whatsinthisfoodbot</h2>\n<p>Perdão pelo longo nome, este bot usa a api da EDAMAN para buscar informações sobre a uma certa comida, sendo um prato, fruta entre outros. Pessoalmente não gostei muito do banco de dados da EDAMAN, mas foi o que encontrei e funcionou super bem e isto é o que você pode esperar:</p>\n<p>![Buscando “french fries” (Batata Frita)](<a href=\"https://telegra.ph/file/dd7fcc3a25e24e0d88064.png\">https://telegra.ph/file/dd7fcc3a25e24e0d88064.png</a> “Buscando \\\\“french fries\\\\” (Batata Frita)“)</p>\n<p>Buscando “french fries” (Batata Frita)</p>\n<p><img src=\"https://telegra.ph/file/108e6b4b35734274bddcf.png\" alt=\"Resultado @whatsinthisfoodbot\" title=\"Resultado @whatsinthisfoodbot\"></p>\n<p>Resultado</p>\n<h2>@ntalesbot</h2>\n<p>Este bot usa uma api em numbersapi.com para buscar algumas curiosidades sobre numeros, sendo sobre uma data especifica, curiosidades matemáticas ou curiosidades em geral.</p>\n<p><img src=\"https://telegra.ph/file/a0328b17abc166020ca88.png\" alt=\"Buscando 275\" title=\"Buscando 275\"></p>\n<p>Buscando “275”</p>\n<h2>@ntextifybot</h2>\n<p>Este é o bot mais inútil que criei dentre todos os outros, ele apenas altera o texto enviado o tornando minúsculo, de cabeça para baixo, espelhado e o resultado pode ver a seguir:</p>\n<p><img src=\"https://telegra.ph/file/f6c1386d60a53d350643f.png\" alt=\"Resultado @ntextifybot\" title=\"Resultado @ntextifybot\"></p>\n<p>Então é por isso mesmo, se vocês tiverem alguma sugestão estarei mais do que feliz em escuta-las, sinta se livre para usar estes bots da forma que quiser, eu gastei mais tempo com `@ndefinitionbot` do que eu queria e ele ainda não funciona bem como eu gostaria, mas todos estes foram divertidos pequenos projetos que eu espero que seja de alguma forma útil para você.</p>\n<p>Tenha um ótimo dia :)</p>","frontmatter":{"cover":"/images/uploads/robot-4363354_960_720.webp","date":"04/08/2021 16:55","isBanner":false,"layout":"post","special":false,"title":"Sobre Meus Bots","category":"Bots"},"fields":{"slug":"/blog/2021-05-11-sobre-meus-bots/"}}]}}}