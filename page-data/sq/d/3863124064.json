{"data":{"site":{"siteMetadata":{"title":"Jorge.Room"}},"allMarkdownRemark":{"nodes":[{"id":"c8c4c7b1-84e1-516a-a2c3-70de108ebb12","html":"<p>Se você já realizou operações o suficiente com números flutuantes já deve ter passado com uma situação onde 0.1 + 0.2 = 0.30000000000000004, ou basicamente você tentou comparar os dois e concluindo que 0.1 + 0.2 != 0.3 por exemplo.</p>\n<p>Vi algumas pessoas culpando o Javascript ou a linguagem em si, mas na verdade este é um problema que deve ser levado um pouco mais a fundo para entender, tanto que criaram um site explicando o porque disto acontecer.</p>\n<p>Neste post pretendo explicar da forma mais concisa que eu conseguir e também como usaram a notação científica (IEEE 754) como referência para a criação de números “flutuantes”.</p>\n<h2>Números Inteiros</h2>\n<p>Primeiramente números inteiros que em C sao chamados de <code class=\"language-text\">long</code> significando que eles possuem 32bit sendo assim</p>\n<blockquote>\n<p>00000000 00000000 00000000 00000000</p>\n</blockquote>\n<p>usados para representar um numero, onde vocês já devem estar acostumados a lidar com números binários.</p>\n<p><img src=\"/images/uploads/int.gif\" alt=\"\" title=\"Integers\"></p>\n<p>E por ai vai até chegar a 2 bilhões.</p>\n<h2>Números Decimais</h2>\n<p>Assim como os numeros inteiros, os números decimais que em C são chamados de <code class=\"language-text\">float</code> tambem possuem 32bit, porém precisamos definir os decimais também, e como fariamos isso? Se fossemos arquitetar a representação desses numeros, provavelmente fariamos assim:</p>\n<blockquote>\n<p>00000000 00000000 . 00000000 00000000</p>\n</blockquote>\n<p>Simplesmente colocar um ponto decimal no meio, antes do ponto decimal contaríamos da forma usual.</p>\n<p><img src=\"/images/uploads/render.gif\" alt=\"\" title=\"Point in the middle approach\"></p>\n<p>E após o ponto decimal, não temos muitas surpresas também, mas devemos nos atentar que estamos lidando com números binários então ao invés de 10, 100 e 1000 nós teriamos:</p>\n<p><img src=\"/images/uploads/render-half.gif\" alt=\"\" title=\"Integer halfs the gross way\"></p>\n<p>Em qualquer combinação, então por exemplo, 4.75 poderia ser representado destas duas formas:</p>\n<blockquote>\n<p>00000000 00000100 . 11000000 00000000 = 4.75</p>\n<p>00000000 00000100 . 01000000 00000000 = 4.75</p>\n</blockquote>\n<p>Mas esta ideia é na verdade horrível, porque detonamos com o tamanho do numero que podemos representar onde antes chegavamos a apróximadamente 2 bilhões, agora só podemos representar numeros até aproximádos 32 mil.</p>\n<p>Para a nossa sorte, pessoas mais espertas que nós tiveram a ideia de se inspirar na notação científica e garantir um melhor uso desses 32bits, assim podemos representar números como 23’00 em 2.3<em>10⁴ e 0,32 como 3.2</em>10⁻³.</p>\n<p>Se fossemos representá-los no sistema binário seria algo assim:</p>\n<blockquote>\n<p>11’00 => 1.1x2⁴ <em>seria sua representação em notação cientifica.</em></p>\n<p>0.0101 => 0.01x2⁻³</p>\n</blockquote>\n<p>Esta forma de representação carrega o nome <strong>IEEE 754.</strong></p>\n<h2>O Que Define IEEE 754?</h2>\n<p>Como de costume, nós receberemos os 32bits, porém como a seguir.</p>\n<blockquote>\n<p>0 00000000 000000000000000000000000</p>\n</blockquote>\n<p>Sendo o <strong>primeiro bit</strong> o bit do sinal, onde <strong>0</strong> significa que ele é positivo e <strong>1</strong> significa que ele é negativo.</p>\n<blockquote>\n<p>0 00000000 000000000000000000000000 = x</p>\n<p>1 00000000 000000000000000000000000 = -x</p>\n</blockquote>\n<p>Os <strong>próximos oito bits</strong> representam o expoente, sendo então:</p>\n<p><img src=\"/images/uploads/ieee-exponents.gif\" alt=\"\" title=\"IEEE Exponents\"></p>\n<p>E por ai vai, mas nos atentando que com 8 bits podemos representar números de <strong>[255-0]</strong>, porém também vamos precisar de expoentes negativos, então por este motivo os números são movidos para <strong>[128-127]</strong>, o que significa que ao invés de termos <strong>x<em>2³</em></strong> <em>como no exemplo anterior, nós teremos <strong>x</strong></em>2⁽³⁻¹²⁷⁾ e se quisermos que o expoente realmente seja 3, precisamos alterar os bits para 130 como a seguir:</p>\n<blockquote>\n<p>0 10000100 000000000000000000000000 = <strong>x*2⁽¹³⁰⁻¹²⁷⁾</strong></p>\n</blockquote>\n<p>Porque 130 - 127 = 3.</p>\n<p>E os últimos 23 bits, representa a <strong>mantissa</strong>. Quando tratamos de notação científica nos queremos definir um dígito, uma vírgula e os decimais, mas com 23 bits podemos definir de 0 ate 2²³ e nao e exatamente disso que precisamos, porque precisamos da mantissa de ir de 1 ate 10, ou em notacao cientifica binaria, de ir de 1 até 2. Podemos tentar novamente fazer oque fizemos da ultima vez e tentar adcionar uma vírgula apos o primeiro bit.</p>\n<blockquote>\n<p>0 10000100 0.0000000000000000000000</p>\n</blockquote>\n<p>Ai podemos definir:</p>\n<p><img src=\"/images/uploads/ieee754.gif\" alt=\"\" title=\"IEE754 walkthrough.\"></p>\n<p>até</p>\n<blockquote>\n<p>0 10000100 1.1111111111111111111111 = 1.999*2⁵</p>\n</blockquote>\n<p>Mas essa soluçao disperdiça um bit armazenamento, as pessoas que fizeram o design desse padrao perceberam que quando estamos lidando com numeros binarios algo acontece que nao acontece em nenhuma outra base.</p>\n<blockquote>\n<p>11’000   1.1<em>2⁴ Preste atençao no primeiro digito.</em></p>\n<p><em>0.0101   1.01</em>2⁻³ Por definição, este numero sempre sera <strong>não</strong> zero.</p>\n</blockquote>\n<p>Mas em binario existe só existe um numero que nao e zero, <strong>1</strong>. Ou seja, se sabemos que o primeiro dígito sempre sera <strong>1</strong>, nao precisamos guarda-lo, podemos salvar um bit movendo a vírgula para esquerda e deixarmos este numero <strong>1</strong> fixo. Agora nossa mantissa esta entre 1 e 2.</p>\n<blockquote>\n<p>0 10000100 .00000000000000000000000</p>\n</blockquote>\n<p>Por mais que os 23 bits nos deem um alcanse de 0 até 2<em>²³ nós diminuimos para conseguir numeros entre 0 e 1 e entao fixamos o numero 1 para conseguir numeros entre 1 e 2 e esta é a parte principal do padrão IEEE 754, mas para os tais numeros normalizados, Como devem saber neste padrão eles tambem incluem numeros não normalizados,</em> NaN, infinitos e 0 &#x26; 0* que talvez eu entre em detalhes num post futuro.</p>\n<h2>Ta, mas e ai?</h2>\n<p>Bom, agora que sabemos como os numeros flutuantes são armazenados. Podemos resumir que este caso curioso ocorre devido as bases usadas, os computadores não lidam com números da mesma forma que nós lidamos, eles precisam converter para binário e depois para decimal e quando convertemos para a base decimal acabamos tendo que lidar com algumas “sobras”. o padrão IEEE dita que todas as operações devem ser arredondadas de forma exata, isso significa que todos os resultados devem ser computados de forma exata e então arredondados, e durante essa conversão perdemos essa precisão devido a isso, o que a representação IEEE certifica é que este arredondamento esteja dentro de um certo limite.<br>\nComo podemos ver a seguir usando uma ferramenta de conversão.</p>\n<p><img src=\"/images/uploads/floating_point_converter.png\" alt=\"Conversão de numeros float.\" title=\"Tool Used: https://www.h-schmidt.net/FloatConverter/IEEE754.html\"></p>\n<p><em>(Ferramenta usada:</em> <a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a><em>)</em></p>\n<p><br>\n<em>Referências:</em></p>\n<p><a href=\"http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></p>\n<p><a href=\"https://0.30000000000000004.com/\">0.30000000000000004.com</a></p>\n<p><a href=\"%20%20https://www.h-schmidt.net/FloatConverter/IEEE754.html\">Float Converter</a></p>\n<p><a href=\"https://indico.cern.ch/event/626147/attachments/1456066/2247140/FloatingPoint.Handout.pdf\">An Introdution to Floating Point</a> by Jeff Arnold</p>\n<p><a href=\"https://youtu.be/p8u_k2LIZyo?t=258\">Fast Inverse Square Root from Quake III</a></p>","excerpt":"<p>Se você já realizou operações o suficiente com números flutuantes já deve ter passado com uma situação onde 0.1 + 0.2 = 0.30000000000000004, ou basicamente você tentou comparar os dois e concluindo que 0.1 + 0.2 != 0.3 por exemplo.</p>\n<p>Vi algumas pessoas…</p>","frontmatter":{"cover":"/images/uploads/pexels-karolina-grabowska-4589440.jpg","date":"22/09/2021 14:02","isBanner":false,"layout":"post","special":false,"title":"Pontos Flutuantes e o padrão IEEE 754","category":"Desenvolvimento"},"fields":{"slug":"/blog/2021-07-20-entendendo-numeros-flutuantes/"}},{"id":"4e3dcd49-6155-52e9-a037-fd162dbb3031","html":"<p>Vou demonstrar neste post como eu fiz a automatização do deploy deste meu blog usando github actions de forma super fácil também serve para sites estáticos ou geradores de site estático, no meu caso estou usando o <strong>gatsby</strong> no blog.</p>\n<h2>Workflow de Referência</h2>\n<p>Este é o arquivo que uso atualmente para realizar o deploy do blog <a href=\"https://gist.github.com/Jorgen-Jr/8b0d0a5ea008853e7332696b5d67e3dd#file-built-deploy-yml\">Este arquivo pode ser encontrado aqui</a>.</p>\n<deckgo-highlight-code language=\"yaml\"  >\n          <code slot=\"code\">name: Deploy\non:\n  push:\n    branches:\n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x]\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install Packages\n        run: npm install # Instalação de dependências.\n      - name: Build pages\n        run: yarn build # Script de build definido no package.json\n\n      - name: Deploy to gh-pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # Segredo com a chave privada para acesso ssh\n          publish_dir: ./public # Pasta onde estará a build e será copiada para a branch gh-pages.</code>\n        </deckgo-highlight-code>\n<p>Precisamente o que este arquivo define que sempre que ocorrer um push na branch principal (main) ira disparar um gatilho para que rode meu script de build definido no package.json e em seguida usando a biblioteca <a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a> para realizar o envio da pasta ./public na branch gh-pages, tornando-o disponível para o github pages. Para resumir ele irá executar os seguintes passos:</p>\n<ul>\n<li>Realizar um check-out para que o workflow tenha acesso ao repositório.</li>\n<li>Instalar todas as dependências necessárias para a build.</li>\n<li>Executar o script de build.</li>\n<li>E para finalizar ele usa o script de <a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a> usando os parâmetros que definimos para realizar o deploy.</li>\n</ul>\n<p>Você pode obter outros exemplos para outras bibliotecas ou aplicações no repositório acima.</p>\n<h2>Inicio</h2>\n<p>Primeiro você precisa criar este arquivo na pasta <code class=\"language-text\">.github/workflows/${nome_da_action}</code> na raiz do seu projeto para que possamos definir quais serão as actions.</p>\n<p>Em seguida você precisa definir uma chave de acesso, no caso eu criei uma chave de deploy (deploy key) pois escolhi usar ssh, mas existem as opções de token do github ou token pessoal.</p>\n<h3>Gerando chave SSH de deploy</h3>\n<p>Para gerar uma chave de ssh você pode usar o seguinte comando.</p>\n<deckgo-highlight-code language=\"textile\"  >\n          <code slot=\"code\">ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</code>\n        </deckgo-highlight-code>\n<p>Isso irá gerar dois arquivos, <code class=\"language-text\">gh-pages.pub</code> sendo a sua chave pública e <code class=\"language-text\">gh-pages</code> sendo sua chave privada.</p>\n<p>Em seguira, navegue até a página de configuração do seu repositório e então DEPLOY_KEYS, clique em adicionar nova chave de deploy com o nome “public key of ACTION_DEPLOY_KEY”, e cole sua chave pública nele.</p>\n<p><img src=\"/images/uploads/blog_gihub_actions_public_deploy_key.png\" alt=\"Screenshot chave publica de deploy\"></p>\n<p>E então crie um secret com o nome “ACTION_DEPLOY_KEY” e cole sua chave privada.</p>\n<p><img src=\"/images/uploads/blog_gihub_actions_private_deploy_key.png\" alt=\"Screenshot chave privada de deploy.\"></p>\n<blockquote>\n<p>Pode escolher os nomes que desejar, apenas altere no <strong>arquivo da action</strong> conforme necessário.</p>\n</blockquote>\n<h3>Primeiro deploy</h3>\n<p>Com isso você já pode realizar o primeiro deploy, e observar seu progresso na aba Actions do seu repositório.</p>\n<p><img src=\"/images/uploads/blog_gihub_actions_actions_tab.png\" alt=\"Aba de actions github.\"></p>\n<p>Com a branch gh-pages criada, podemos ir para as configurações de repositório e na aba Pages onde podemos definir qual branch será a que irá ao ar, qual pasta entre outras configurações relacionadas.</p>\n<p><img src=\"/images/uploads/blog_gihub_actions_pages_tab.png\" alt=\"Aba de Pages\"></p>\n<blockquote>\n<p>Por eu ter colocado o nome do meu repositório meu nome de perfil + .github.io o github irá disponibilizar o website em ${nome_de_perfil}.github.io, caso contrario estaria em ${nome_de_perfil}.github.io/${nome_do_repositorio}.</p>\n</blockquote>\n<h2>Referências</h2>\n<p>Para mais detalhes e guia para outros geradores estáticos (Hugo, Jekyll, Vue, Node, Flutter Web…)</p>\n<ul>\n<li><a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a></li>\n</ul>","excerpt":"<p>Vou demonstrar neste post como eu fiz a automatização do deploy deste meu blog usando github actions de forma super fácil também serve para sites estáticos ou geradores de site estático, no meu caso estou usando o <strong>gatsby</strong> no blog.</p>\n<h2>Workflow de…</h2>","frontmatter":{"cover":"/images/uploads/auto_github_pages.jpg","date":"13/08/2021 14:21","isBanner":false,"layout":"post","special":false,"title":"Deploy Automático de Websites Para o Github Pages","category":"Tutorial"},"fields":{"slug":"/blog/2021-08-10-deploy-automático-de-websites-react-para-o-github-pages/"}},{"id":"6f3b10c0-9270-5a70-8a5e-5f7c5ee72aa2","html":"<p>Há vários meses atrás eu desenvolvi alguns bots apra o telegram, sendo eles <strong><code class=\"language-text\">@ndefinitionbot</code></strong>, <strong><code class=\"language-text\">@whatsinthisfoodbot</code></strong>, <strong><code class=\"language-text\">@ntalesbot</code></strong> e <strong><code class=\"language-text\">@ntextifybot</code></strong>, e recentemente migrei eles para usarem a arquitetura serverless para que se tornem mais disponíveis.</p>\n<p>Mantenha em mente que por estarem usando funções serverless na aws vocês podem expecienciar as tais chamadas <em>cold starts</em> e por isso… Minhas sinceras desculpas, estarei explicando o que cada bot faz e o que você pode esperar deles.</p>\n<h2>@whatsinthisfoodbot</h2>\n<p>Perdão pelo longo nome, este bot usa a api da EDAMAN para buscar informações sobre a uma certa comida, sendo um prato, fruta entre outros. Pessoalmente não gostei muito do banco de dados da EDAMAN, mas foi o que encontrei e funcionou super bem e isto é o que você pode esperar:</p>\n<p><img src=\"https://telegra.ph/file/dd7fcc3a25e24e0d88064.png\" alt=\"Buscando french fries (Batata Frita)\" title=\"Buscando french fries (Batata Frita)\"></p>\n<p>Buscando “french fries” (Batata Frita)</p>\n<p><img src=\"https://telegra.ph/file/108e6b4b35734274bddcf.png\" alt=\"Resultado @whatsinthisfoodbot\" title=\"Resultado @whatsinthisfoodbot\"></p>\n<p>Resultado</p>\n<h2>@ntalesbot</h2>\n<p>Este bot usa uma api em numbersapi.com para buscar algumas curiosidades sobre numeros, sendo sobre uma data especifica, curiosidades matemáticas ou curiosidades em geral.</p>\n<p><img src=\"https://telegra.ph/file/a0328b17abc166020ca88.png\" alt=\"Buscando 275\" title=\"Buscando 275\"></p>\n<p>Buscando “275”</p>\n<h2>@ntextifybot</h2>\n<p>Este é o bot mais inútil que criei dentre todos os outros, ele apenas altera o texto enviado o tornando minúsculo, de cabeça para baixo, espelhado e o resultado pode ver a seguir:</p>\n<p><img src=\"https://telegra.ph/file/f6c1386d60a53d350643f.png\" alt=\"Resultado @ntextifybot\" title=\"Resultado @ntextifybot\"></p>\n<p>Então é por isso mesmo, se vocês tiverem alguma sugestão estarei mais do que feliz em escuta-las, sinta se livre para usar estes bots da forma que quiser, eu gastei mais tempo com `@ndefinitionbot` do que eu queria e ele ainda não funciona bem como eu gostaria, mas todos estes foram divertidos pequenos projetos que eu espero que seja de alguma forma útil para você.</p>\n<p>Tenha um ótimo dia :)</p>","excerpt":"<p>Há vários meses atrás eu desenvolvi alguns bots apra o telegram, sendo eles <strong><code class=\"language-text\">@ndefinitionbot</code></strong>, <strong><code class=\"language-text\">@whatsinthisfoodbot</code></strong>, <strong><code class=\"language-text\">@ntalesbot</code></strong> e <strong><code class=\"language-text\">@ntextifybot</code></strong>, e recentemente migrei eles para usarem a arquitetura serverless para que se tornem mais disponíveis.</p>\n<p>Mantenha em mente que por estarem usando funções serverless na aws vocês podem expecienciar as tais chamadas <em>cold starts</em> e por isso… Minhas sinceras desculpas, estarei…</p>","frontmatter":{"cover":"/images/uploads/robot-4363354_960_720.webp","date":"04/08/2021 16:55","isBanner":false,"layout":"post","special":false,"title":"Sobre Meus Bots","category":"Bots"},"fields":{"slug":"/blog/2021-05-11-sobre-meus-bots/"}},{"id":"7b06e957-5978-53c0-85c0-76a645afba48","html":"<p>Async/Await parece ótimo porque evita o inferno do calback ou a pirâmide do terror por escrever um código assíncrono linha por linha de forma limpa.</p>\n<p>Neste post vou demonstrar através de exemplos o que é este inferno de callback, e algumas formas de tratar erros em métodos assíncronos.</p>\n<blockquote>\n<p>Exemplo do callback hell</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function hell(){\n\tstep1((a) =&gt; {\n\t\tstep2((b) =&gt; {\n\t\t\tstep3((c) =&gt; {\n\t\t\t\t//Bem Vindo\n\t\t\t})\n\t\t})\n\t})\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Exemplo de código assíncrono.</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function heaven(){\n\tconst a = await step1();\n\tconst b = await step2();\n\tconst c = await step3();\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Isto é… Até tivermos que lidar com tratamento de erros… Porque você pode acabar caindo na torre do terror do try catch, transformando seu código simples e limpo de linhas únicas em no mínimo mais 6 linhas de código.</p>\n<blockquote>\n<p>Exemplo da torre do terror (tower of terror)</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function towerOfTerror(){\n\tlet a;\n\tlet b;\n\tlet c;\n\t\n\ttry{\n\t\ta = await step1();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\t\n\ttry{\n\t\tb = await step2();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\ttry{\n\t\tc = await step3();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\t\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Nesses casos, a solução mais simples é simplesmente usar o catch no final de cada promise criada.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">\tawait step1().catch(fun);</code>\n        </deckgo-highlight-code>\n<p>Algo como:</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function gettingBetter(){\n\tconst a = await step1().catch(err =&gt; { handle(err) });\n\tconst b = await step2().catch(err =&gt; { handle(err) });\n\tconst c = await step3().catch(err =&gt; { handle(err) });\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>O que até que fica melhor porém ainda é repetitivo, uma outra opção é criar uma funcão onde exista apenas um bloco try catch para substituir todas as outras, como a seguir:</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function awessome(){\n\ttry{\n\t\tconst data = await promise;\t\t\n\t\treturn [data, null];\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn [null, error];\n\t}\n}</code>\n        </deckgo-highlight-code>\n<p>Assim quando a promessa for resolvida, ela devolverá um array com sua resposta e nulo se não houver erros, e se conter erros retornará um array com o primeiro índice nulo e o erro, assim podemos manter o código limpo linha por linha usando desestruturação e usar um if caso queira fazer outra coisa com o erro.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function main(){\n\tconst [ data, error ] = await awessome();\n\t\n\tif(error) { }\n\t\n\tconst [ data2, error2 ] = await awessome();\n\tconst [ data3, error3 ] = await awessome();\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Referência: <a href=\"https://www.youtube.com/watch?v=ITogH7lJTyE\">Fireship</a></p>","excerpt":"<p>Async/Await parece ótimo porque evita o inferno do calback ou a pirâmide do terror por escrever um código assíncrono linha por linha de forma limpa.</p>\n<p>Neste post vou demonstrar através de exemplos o que é este inferno de callback, e algumas formas de…</p>","frontmatter":{"cover":"/images/uploads/pexels-photo-2557709.jpeg","date":"28/07/2021 15:02","isBanner":false,"layout":"post","special":false,"title":"Async/Await try-catch Infernal","category":"extra-bits"},"fields":{"slug":"/blog/2021-06-09-async-await-try-catch-infernal/"}},{"id":"1384c8dd-2533-5228-b97f-62fe9829d9dc","html":"<p>A meses atrás criei um projeto usando o <strong>create-react-app</strong> e usei o <strong>react-router</strong> para lidar com as rotas da minha aplicação front-end, porém ao enviar minha build para o servidor, acabei sendo introduzido a um problema, quando o usuário entrava em uma rota e atualizar a página ou quando ele acessava através de um link externo ele retornava o erro 404, devido ao arquivo não ter sido encontrado no endereço requisitado, para resolver isso usei regras de redirecionamento no servidor. Espero que minha solução possa ajudar quem também passar por esse problema.</p>\n<h2>Resolvendo no Apache e servidores com suporte ao arquivo .htaccess</h2>\n<p>Basta criar uma rota de redirecionamento, como exemplificado abaixo, primeiro crie um arquivo <code class=\"language-text\">.httaccess</code> na pasta public do seu projeto react. É importante que este arquivo esteja na raiz quando for feito sua build.</p>\n<p><a href=\"https://gist.github.com/Jorgen-Jr/d4b19ad2d89b538e466c11a828fc36d8\">O arquivo exemplificado pode ser encontrado aqui.</a></p>\n<deckgo-highlight-code language=\"xml\"  >\n          <code slot=\"code\">&lt;IfModule mod_rewrite.c&gt;\n\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-l\n  RewriteRule . /index.html [L]\n\n&lt;/IfModule&gt;</code>\n        </deckgo-highlight-code>\n<h2>Resolvendo no NGINX com o arquivo de configuraçao nginx.conf</h2>\n<p>Acesse o arquivo de configuraço do seu nginx, normalmente localizado em /etc/nginx/conf.d/default.conf e adcione a linha <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> como a seguir:</p>\n<p>Observando que apenas a linha <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> foi alterada do meu arquivo de configuração padrão.\n<a href=\"https://gist.github.com/Jorgen-Jr/d639b2d0e9e72189e13539689e89aa39\">O mesmo pode ser encontrado aqui.</a></p>\n<deckgo-highlight-code language=\"textile\"  >\n          <code slot=\"code\">    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n\t    try_files $uri $uri/ /index.html;\n    }</code>\n        </deckgo-highlight-code>\n<h2>Resolvendo em servidores Netlify</h2>\n<p>Para resolver este tipo de erro ao subir em servidores do Netlify você precisa criar um arquivo <strong>_redirect</strong> na pasta public do seu projeto e adcionar a seguinte linha no arquivo. É importante que este arquivo esteja na raiz quando for feito sua build.</p>\n<p><a href=\"https://gist.github.com/Jorgen-Jr/7f866bfcb6c3a3f3b247101d515213a7\">O mesmo pode ser encontrado aqui.</a></p>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">/*    /index.html   404</code>\n        </deckgo-highlight-code>","excerpt":"<p>A meses atrás criei um projeto usando o <strong>create-react-app</strong> e usei o <strong>react-router</strong> para lidar com as rotas da minha aplicação front-end, porém ao enviar minha build para o servidor, acabei sendo introduzido a um problema, quando o usuário entrava em uma…</p>","frontmatter":{"cover":"/images/uploads/pexels-photo-14303.webp","date":"22/07/2021 13:52","isBanner":false,"layout":"post","special":false,"title":"Resolvendo o Erro 404 com React Router","category":"Extra Bit"},"fields":{"slug":"/blog/2021-05-20-erro-404-com-o-react-router/"}}]}}}