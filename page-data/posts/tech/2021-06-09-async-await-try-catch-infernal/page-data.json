{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/tech/2021-06-09-async-await-try-catch-infernal/","result":{"data":{"site":{"siteMetadata":{"title":"Jorge.Room"}},"markdownRemark":{"id":"3996849c-e5fd-5608-b6a5-fb60dc8d6f0d","html":"<p>Async/Await parece ótimo porque evita o inferno do calback ou a pirâmide do terror por escrever um código assíncrono linha por linha de forma limpa.</p>\n<p>Neste post vou demonstrar através de exemplos o que é este inferno de callback, e algumas formas de tratar erros em métodos assíncronos.</p>\n<blockquote>\n<p>Exemplo do callback hell</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function hell(){\n\tstep1((a) =&gt; {\n\t\tstep2((b) =&gt; {\n\t\t\tstep3((c) =&gt; {\n\t\t\t\t//Bem Vindo\n\t\t\t})\n\t\t})\n\t})\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Exemplo de código assíncrono.</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function heaven(){\n\tconst a = await step1();\n\tconst b = await step2();\n\tconst c = await step3();\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Isto é… Até tivermos que lidar com tratamento de erros… Porque você pode acabar caindo na torre do terror do try catch, transformando seu código simples e limpo de linhas únicas em no mínimo mais 6 linhas de código.</p>\n<blockquote>\n<p>Exemplo da torre do terror (tower of terror)</p>\n</blockquote>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function towerOfTerror(){\n\tlet a;\n\tlet b;\n\tlet c;\n\t\n\ttry{\n\t\ta = await step1();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\t\n\ttry{\n\t\tb = await step2();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\ttry{\n\t\tc = await step3();\n\t}catch (error) {\n\t\thandle(error)\n\t}\n\t\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Nesses casos, a solução mais simples é simplesmente usar o catch no final de cada promise criada.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">\tawait step1().catch(fun);</code>\n        </deckgo-highlight-code>\n<p>Algo como:</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function gettingBetter(){\n\tconst a = await step1().catch(err =&gt; { handle(err) });\n\tconst b = await step2().catch(err =&gt; { handle(err) });\n\tconst c = await step3().catch(err =&gt; { handle(err) });\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>O que até que fica melhor porém ainda é repetitivo, uma outra opção é criar uma funcão onde exista apenas um bloco try catch para substituir todas as outras, como a seguir:</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function awessome(){\n\ttry{\n\t\tconst data = await promise;\t\t\n\t\treturn [data, null];\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn [null, error];\n\t}\n}</code>\n        </deckgo-highlight-code>\n<p>Assim quando a promessa for resolvida, ela devolverá um array com sua resposta e nulo se não houver erros, e se conter erros retornará um array com o primeiro índice nulo e o erro, assim podemos manter o código limpo linha por linha usando desestruturação e usar um if caso queira fazer outra coisa com o erro.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function main(){\n\tconst [ data, error ] = await awessome();\n\t\n\tif(error) { }\n\t\n\tconst [ data2, error2 ] = await awessome();\n\tconst [ data3, error3 ] = await awessome();\n\treturn a + b + c;\n}</code>\n        </deckgo-highlight-code>\n<p>Referência: <a href=\"https://www.youtube.com/watch?v=ITogH7lJTyE\">Fireship</a></p>","excerpt":"Async/Await parece ótimo porque evita o inferno do calback ou a pirâmide do terror por escrever um código assíncrono linha por linha de forma limpa. Neste post vou demonstrar através de exemplos o que é este inferno de callback, e algumas formas de…","frontmatter":{"cover":"/images/uploads/pexels-photo-2557709.jpeg","date":"28/07/2021 15:02","isBanner":false,"layout":"post","special":false,"title":"Async/Await try-catch Infernal"},"fields":{"slug":"/posts/tech/2021-06-09-async-await-try-catch-infernal/"}},"count":{"totalCount":5},"previous":{"fields":{"slug":"/posts/tech/2021-05-20-erro-404-com-o-react-router/"},"frontmatter":{"title":"Resolvendo o Erro 404 com React Router"}},"next":{"fields":{"slug":"/posts/tech/2021-05-11-sobre-meus-bots/"},"frontmatter":{"title":"Sobre Meus Bots"}}},"pageContext":{"id":"3996849c-e5fd-5608-b6a5-fb60dc8d6f0d","date":"2021-07-28","previousPostId":"8c7e67ec-a7f8-5638-a102-02a19beb0252","nextPostId":"b5c7d2ce-5668-5f19-ab4a-027e655d3c6f"}},"staticQueryHashes":["712016698"],"slicesMap":{}}