{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/blog/2021-04-21-configurando-um-ambiente-de-testes-simples-com-docker/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Jorge.Room"}},"markdownRemark":{"id":"51bf8bf9-be8b-592e-80f6-21e66bbc05e9","html":"<p>Veja como subir e configurar um ambiente simples com banco de dados e servidores para front-end e backend usando docker.</p>\n<blockquote>\n<p>Usando distros baseadas no Debian/Ubuntu (No meu caso estarei usando o ElementaryOS 5, mas também funciona para as outras distros)</p>\n</blockquote>\n<h2 id=\"instalando-o-docker\" style=\"position:relative;\"><a href=\"#instalando-o-docker\" aria-label=\"instalando o docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Instalando o Docker</h2>\n<h3 id=\"usando-o-repositório-official-do-docker\" style=\"position:relative;\"><a href=\"#usando-o-reposit%C3%B3rio-official-do-docker\" aria-label=\"usando o repositório official do docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usando o Repositório Official do Docker</h3>\n<p>Para configurar o repositório, você precisa atualizar o <code class=\"language-text\">apt</code> e instalar os seguintes pacotes: <break></p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo apt-get update</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/01.png\" alt=\"Passo - 01\"></p>\n<p>E em seguida adcionar a chave GPG official do Docker.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/02.png\" alt=\"Passo - 02\"></p>\n<p>Você pode verificar se a chave foi adcionada pelo fingerprint <code class=\"language-text\">9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>, buscando pelos últimos 8 characteres. O resultado deve ser como a seguir:</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo apt-key fingerprint 0EBFCD88\n\npub   rsa4096 2017-02-22 [SCEA]\n      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   rsa4096 2017-02-22 [S]</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/03.png\" alt=\"Passo - 03\"></p>\n<p>Agora podemos adcionar o repositório dos lançamentos estáveis do Docker Engine. Através do comando:</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo add-apt-repository \\\n   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable&quot;</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Note que no caso do ElementaryOS eu precisei trocar a subfunção <code class=\"language-text\">$(lsb_release-cs)</code> que retorna a sua distribuição linux para <code class=\"language-text\">bionic</code>.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/04.png\" alt=\"Passo - 04\"></p>\n<p>Com o repositório instalado, atualize seu apt-get através do comando <code class=\"language-text\">sudo apt-get update</code> e instale o Docker Engine através do comando <code class=\"language-text\">sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/05.png\" alt=\"Passo - 05\"></p>\n<p>Você pode verificar que o docker está instalado através do comando <code class=\"language-text\">docker -vv</code>.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/06.png\" alt=\"Passo - 06\"></p>\n<p>Ou executando o comando <code class=\"language-text\">docker run hello-world</code> que deve baixar a imagem de teste e quando executa-la mostrar a seguinte mensagem.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/07.png\" alt=\"Passo - 07\"></p>\n<h3 id=\"compose\" style=\"position:relative;\"><a href=\"#compose\" aria-label=\"compose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compose</h3>\n<p>Instale agora o docker compose através dos comandos:</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code>\n        </deckgo-highlight-code>\n<p>para baixar o docker-compose e</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo chmod +x /usr/local/bin/docker-compose</code>\n        </deckgo-highlight-code>\n<p>para torna-lo executável.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/09.png\" alt=\"Passo 8\"></p>\n<h2 id=\"configurando-o-ambiente-através-do-yaml\" style=\"position:relative;\"><a href=\"#configurando-o-ambiente-atrav%C3%A9s-do-yaml\" aria-label=\"configurando o ambiente através do yaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando o Ambiente através do YAML</h2>\n<p>O docker-compose permite o uso de scripts yaml, onde ditaremos as imagens e as propriedades de que ela deve rodar.<break>\nIrei criar uma pasta chamada <code class=\"language-text\">ambiente_de_testes</code> e dentro dela irei criar um arquivo <code class=\"language-text\">docker-compose.yml</code> para criarmos nosso ambiente.<break>\nNosso ambiente irá usar NodeJs, Postgres e Nginx, então de inicio podemos adcionar ao arquivo as seguintes propriedades.</p>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">version: &#39;3.4&#39;\nservices:\n  postgres:\n    image: postgres\n    container_name: srv_postgres\n    ports:\n      - &#39;5432:5432&#39;\n  nginx:\n    image: nginx\n    container_name: srv_nginx\n    ports:\n      - &#39;81:80&#39;\n  node:\n    image: &#39;node:slim&#39;\n    container_name: srv_node\n    depends_on:\n      - postgres</code>\n        </deckgo-highlight-code>\n<p>Definimos até então, quais serviços serão executados ao executar o comando do docker compose, em quais portas (com exceção do nodejs) e qual será o nome dos nossos containers. Mas podemos ir além, vamos definir agora os seus volumes, suas variáveis de ambiente e o comando para iniciar o servidor nodejs.</p>\n<blockquote>\n<p>Definir volumes é útil para poder armazenar os arquivos que a imagem irá usar, assim toda vez que o container precisar ser recriado estas informações não serão perdidas.\nPara definir o volume iremos usar no escopo da imagem <code class=\"language-text\">volumes: {endereço do volume}</code> onde será dividido em <code class=\"language-text\">{Diretório do volume}</code> + <code class=\"language-text\">{nome do volume}</code> + <code class=\"language-text\">{diretório do volume que deseja salvar}</code> e os nomes dos volumes devem ser definidos como a seguir.</p>\n</blockquote>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">version: &#39;3.4&#39;\nservices:\n  postgres:\n    image: postgres\n    container_name: srv_postgres\n    volumes:\n      - &#39;/home/jorge-n/ambiente_de_testes/var/lib/postgres:/var/lib/postgresql/&#39;\n    ports:\n      - &#39;5432:5432&#39;\n    environment:\n      - POSTGRES_DB= {database padrão de seu banco de dados}\n      - POSTGRES_PASSWORD= {Senha do usuário do banco de dados}\n      - POSTGRES_USER= {usuário a ser criado no banco ao inicia-lo}\n      - PGPORT=5432\n  nginx:\n    image: nginx\n    container_name: srv_nginx\n    volumes:\n      - &#39;/home/jorge-n/ambiente_de_testes/nginx/www:/usr/share/nginx/html/&#39;\n    ports:\n      - &#39;81:80&#39;\n    environment:\n      - NGINX_HOST={dominio onde irá rodar o servidor web}\n      - NGINX_PORT=80\n  node:\n    image: &#39;node:slim&#39;\n    container_name: srv_node\n    depends_on:\n      - postgres\n    volumes:\n      - &#39;/home/jorge-n/ambiente_de_testes/backend/node:/home/node/app&#39;\n    ports:\n      - &#39;34012:3001&#39;\n    working_dir: /home/node/app\n    environment:\n      - NODE_ENV=homolog\n      - PORT=3001\n      - SECRET_SESSION={Segredo da sessão (usado em autenticação)}\n      - DB_URI=postgres {endereço do banco de dados, aqui pode ser o nome do serviço}\n      - DB_USER={Usuário do banco que a aplicação irá usar}\n      - DB_PASSWORD={Senha do banco de dados}\n      - DB_DATABASE= {Database da aplicação}\n    expose:\n      - &#39;34012&#39;\n    command: bash -c &quot;npm install &amp;&amp; node src/server.js&quot; {Comando que será executado ao iniciar o servidor de aplicação}\nvolumes:\n  postgres: {}\n  www: {}\n  node: {}</code>\n        </deckgo-highlight-code>\n<p>Meu arquivo final ficou assim, mas você pode altera-lo conforme sua necessidade.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/08.png\" alt=\"Passo 8\"></p>\n<h3 id=\"iniciando-o-ambiente-de-testes-com-docker-compose\" style=\"position:relative;\"><a href=\"#iniciando-o-ambiente-de-testes-com-docker-compose\" aria-label=\"iniciando o ambiente de testes com docker compose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iniciando o ambiente de testes com Docker Compose.</h3>\n<p>Para iniciar o ambiente de testes, basta ir até a pasta onde está o arquivo <code class=\"language-text\">docker-compose.yml</code> e executar o comando <code class=\"language-text\">sudo docker-compose up</code> ele irá baixar as imagens dos containers necessárias e iniciar os serviços criando as pastas aonde definimos.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/10.png\" alt=\"Passo 9\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/11.png\" alt=\"Passo 10\"></p>\n<p>Agora basta copiar o código da nossa aplicação para as pastas criadas e reiniciar nosso ambiente rodando ele no fundo usando o comando <code class=\"language-text\">sudo docker-compose up -d</code>.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/12.png\" alt=\"Passo 11\"></p>\n<p>E voilla, tá pronto o sorvetinho. já podemos acessar a aplicação localmente.</p>\n<h2 id=\"dockstation\" style=\"position:relative;\"><a href=\"#dockstation\" aria-label=\"dockstation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockstation</h2>\n<p>Se você preferir usar uma interface para gerenciar seus containers, recomendo usar o <a href=\"https://dockstation.io/\">Dockstation</a>.</p>\n<h3 id=\"importando\" style=\"position:relative;\"><a href=\"#importando\" aria-label=\"importando permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importando</h3>\n<p>Como já possuimos um arquivo docker-composee.yml basta criar um novo projeto no Dockstation usando ele.</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/13.png\" alt=\"Passo 12\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/14.png\" alt=\"Passo 13\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/15.png\" alt=\"Passo 14\"></p>\n<p>O Dockstation facilita o gerenciamento, te dando acesso aos logs, propriedades e várias informações sobre o projeto e os containers, alem de dispor um editor para modificar o código do compose.</p>\n<blockquote>\n<p>Note que você vai precisar remover os container criados anteriormente para poder usar os nomes usados em <code class=\"language-text\">container_name</code> no nosso arquivo compose.</p>\n</blockquote>\n<h2 id=\"extra-bits\" style=\"position:relative;\"><a href=\"#extra-bits\" aria-label=\"extra bits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extra Bits</h2>\n<h3 id=\"react-router-método-1\" style=\"position:relative;\"><a href=\"#react-router-m%C3%A9todo-1\" aria-label=\"react router método 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Router Método 1</h3>\n<p>Uma configuração adcional é necessária para usar o react-router do reactjs no nginx. Para fazer isso através do docker, vamos entrar no container através do terminal usando o seguinte comando.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">sudo docker exec -it srv_nginx /bin/bash</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/16.png\" alt=\"Passo 15\"></p>\n<p>Em seguida instale um editor de sua preferencia, eu usarei o nano.\nO arquivo que vamos modificar é o <code class=\"language-text\">default.conf</code> localizado em <code class=\"language-text\">/etc/nginx/config.d/default.conf</code> então irei usar o comando <code class=\"language-text\">nano /etc/nginx/conf.d/default.conf</code> para edita-lo.\nAdcione <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> dentro do escopo <code class=\"language-text\">location / {</code> como a seguir:</p>\n<p><img src=\"https://raw.githubusercontent.com/Jorgen-Jr/tutorial_docker_compose/master/screenshots/17.png\" alt=\"Passo 16\"></p>\n<p>Salve o arquivo e saia do container e o reinicie com <code class=\"language-text\">sudo docker container restart srv_nginx</code>. Isso deve resolver os problemas com react-router onde acabamos com uma página 404.</p>\n<h3 id=\"react-router-método-2\" style=\"position:relative;\"><a href=\"#react-router-m%C3%A9todo-2\" aria-label=\"react router método 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Router Método 2</h3>\n<p>Alternativamente, você pode salvar o arquivo conf em uma pasta separada no nosso projeto adcionando aos volumes do nginx a seguinte linha.</p>\n<deckgo-highlight-code language=\"python\"  >\n          <code slot=\"code\">    - &#39;./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf&#39;</code>\n        </deckgo-highlight-code>\n<p>Assim poderá editar o arquivo direto na pasta do projeto adcionando a linha <code class=\"language-text\">try_files $uri $uri/ /index.html;</code> dentro do escopo <code class=\"language-text\">location / {</code> como mostrado no método 1:</p>\n<h3 id=\"erro-403-nginx\" style=\"position:relative;\"><a href=\"#erro-403-nginx\" aria-label=\"erro 403 nginx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Erro 403 Nginx</h3>\n<p>Este erro usualmente é causado por falta de permissão aos arquivos na pasta que definimos. para resolver isso, vá até a pasta do projeto e execute o comando <code class=\"language-text\">sudo chmod 777 -R ./</code> para dar permissão de leitura, escrita e execução para todos o proprietário, grupo e todos os outros usuários.</p>","excerpt":"Veja como subir e configurar um ambiente simples com banco de dados e servidores para front-end e backend usando docker. Usando distros baseadas no Debian/Ubuntu (No meu caso estarei usando o ElementaryOS 5, mas também funciona para as outras distros…","frontmatter":{"cover":"/images/uploads/pexels-pixabay-326410.jpg","date":"14/07/2021 14:07","isBanner":false,"layout":"post","special":false,"title":"Configurando Um Ambiente de Testes Simples com Docker"},"fields":{"slug":"/blog/2021-04-21-configurando-um-ambiente-de-testes-simples-com-docker/"}},"count":{"totalCount":3},"previous":{"fields":{"slug":"/blog/2021-05-11-sobre-ndefinitionbot/"},"frontmatter":{"title":"Sobre nDefinitionBot"}},"next":{"fields":{"slug":"/blog/2021-05-20-erro-404-com-o-react-router/"},"frontmatter":{"title":"Resolvendo o Erro 404 com React Router"}}},"pageContext":{"id":"51bf8bf9-be8b-592e-80f6-21e66bbc05e9","date":"2021-07-14","previousPostId":"132cc650-40f9-5506-bed1-74b20b2bb866","nextPostId":"1384c8dd-2533-5228-b97f-62fe9829d9dc"}},
    "staticQueryHashes": ["712016698"]}