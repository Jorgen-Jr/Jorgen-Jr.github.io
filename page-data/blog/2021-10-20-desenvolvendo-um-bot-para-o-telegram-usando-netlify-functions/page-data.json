{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/blog/2021-10-20-desenvolvendo-um-bot-para-o-telegram-usando-netlify-functions/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Jorge.Room"}},"markdownRemark":{"id":"f8f10298-5d6a-5b84-9b95-b247b398a17d","html":"<p>Neste tutorial vou mostrar o passo a passo de como criar seu bot de telegram usando javascript e o serviço serverless netlify functions.\nAo final do post vou deixar nas disposições finais as desvantagens de usar este método, apesar de que o serviço ser gratuíto é bem interessante de usar.</p>\n<h2 id=\"sumário\" style=\"position:relative;\"><a href=\"#sum%C3%A1rio\" aria-label=\"sumário permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sumário</h2>\n<ol>\n<li><a href=\"#criando-seu-bot\">Criando Seu Bot</a></li>\n<li><a href=\"#iniciando-o-projeto\">Iniciando o Projeto</a></li>\n<li><a href=\"#codando-o-bot\">Codando o Bot</a></li>\n<li><a href=\"#subindo-o-c%C3%B3digo-para-o-netlify\">Subindo o Código Para o Netlify</a></li>\n<li><a href=\"#configurando-webhook\">Configurando Webhook</a></li>\n<li><a href=\"#disposi%C3%A7%C3%B5es-finais\">Disposições finais</a></li>\n</ol>\n<h2 id=\"criando-seu-bot\" style=\"position:relative;\"><a href=\"#criando-seu-bot\" aria-label=\"criando seu bot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Criando Seu Bot</h2>\n<p>Primeiro vamos criar nosso bot usando o <a href=\"tg://resolve?domain=BotFather\">@BotFather</a>.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-13-45-11.png\" alt=\"Conversando com o BotFather\" title=\"BotFather\"></p>\n<p>Clique em Start/Iniciar para iniciar o processo de criação do bot. Use o comando <code class=\"language-text\">/newbot</code> para criarmos o nosso bot.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-13-47-38.png\" alt=\"Comando /newbot \" title=\"Comandos BotFather.\"></p>\n<p>Em seguida ele irá perguntar pelo nome do bot, só para tests, vou dar o nome de Olá Usuário.</p>\n<p>E então devemos escolher o nome de usuário do bot, que deve terminar com “bot”, vou dar o nome de ola_usuario_bot.</p>\n<p>Ele irá devolver as informações do bot e seu token de acesso como a seguir.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-13-51-23.png\" alt=\"Criando o novo bot.\" title=\"Criando o bot.\"></p>\n<h3 id=\"configurando-inline-mode\" style=\"position:relative;\"><a href=\"#configurando-inline-mode\" aria-label=\"configurando inline mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando inline mode.</h3>\n<p>Acesse seus bots usando o comando <code class=\"language-text\">/mybots</code> e selecione o bot que acabou de criar.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-15-18-39.png\" alt=\"Configurando o Inline Mode\" title=\"Configurando o Inline Mode\"></p>\n<p>Em seguida clique em <code class=\"language-text\">Bot Settings</code>.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-15-19-58.png\" alt=\"Bot Settings.\" title=\"Bot Settings.\"></p>\n<p>E então em <code class=\"language-text\">Inline Mode</code> e então em <code class=\"language-text\">Turn On.</code></p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-15-20-49.png\" alt=\"Inline Mode.\" title=\"Inline Mode.\"></p>\n<p>Agora podemos ir para o código.</p>\n<h2 id=\"iniciando-o-projeto\" style=\"position:relative;\"><a href=\"#iniciando-o-projeto\" aria-label=\"iniciando o projeto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iniciando o Projeto</h2>\n<p>Como é um projeto simples em javascript, esta é a configuração básica para podermos começar.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-13-58-09.png\" alt=\"Project Init\" title=\"Iniciando o projeto\"></p>\n<p>Sendo que precisamos do arquivo netlify.toml para definir onde nossas funções serveless estarão, e uma pasta functions para colocar as tais funções.</p>\n<p>Abra a pasta raíz do projeto na ide que preferir.</p>\n<h3 id=\"arquivo-netlifytoml\" style=\"position:relative;\"><a href=\"#arquivo-netlifytoml\" aria-label=\"arquivo netlifytoml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arquivo netlify.toml</h3>\n<p>Neste arquivo precisamos informar qual será a pasta com as funções serverless, como neste projeto ela está na pasta /functions/ podemos atribuir como a seguir:</p>\n<deckgo-highlight-code language=\"yaml\"  >\n          <code slot=\"code\">[build]\n  functions = &quot;./functions&quot;</code>\n        </deckgo-highlight-code>\n<h3 id=\"criando-as-funções\" style=\"position:relative;\"><a href=\"#criando-as-fun%C3%A7%C3%B5es\" aria-label=\"criando as funções permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Criando as</strong> Funções</h3>\n<p><strong>De acordo com a <a href=\"https://core.telegram.org/bots/api\">documentação da API de bots</a>.</strong></p>\n<p>Para este bot vamos usar estas 3 funções. Sendo o bot o nosso endpoint para receber as requests e as outras duas para responder essas requests.</p>\n<ul>\n<li>bot.js</li>\n<li><a href=\"https://core.telegram.org/bots/api#answerinlinequery\">answerInlineQuery.js</a></li>\n<li><a href=\"https://core.telegram.org/bots/api#sendmessage\">sendMessage.js</a></li>\n</ul>\n<p>A estrutura do nosso projeto deve estar assim:</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-14-10-35.png\" alt=\"Estrutura do Projeto.\" title=\"Estrutura do Projeto\"></p>\n<p>Vamos estar usando o <code class=\"language-text\">axios</code>, então podemos usar o npm init para iniciar um projeto node e instalar esta dependencia com <code class=\"language-text\">npm install axios</code></p>\n<h2 id=\"codando-o-bot\" style=\"position:relative;\"><a href=\"#codando-o-bot\" aria-label=\"codando o bot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Codando o Bot</h2>\n<p><a href=\"https://github.com/Jorgen-Jr/ola_usuario_bot\">O repositório com o código deste bot poderá se encontrado aqui.</a></p>\n<h3 id=\"função-principal\" style=\"position:relative;\"><a href=\"#fun%C3%A7%C3%A3o-principal\" aria-label=\"função principal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Função Principal</h3>\n<p>Está função será responsável por receber os updates sempre que o bot for contatado no telegram, mais a frente quando formos configurar nosso webhook será para essa função que iremos redirecionar.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const axios = require(&quot;axios&quot;); //Usando axios para realizar as requests.\n\nexports.handler = async (event) =&gt; {\n    const body = event.body; //Recebendo o body da request com as informações.\n\n    const req = JSON.parse(body); //Convertendo a body em JSON.\n\n    //Desestruturando apenas os objetos necessários para as funções. Nosso bot irá receber mensagens e comandos de inline query.\n    const { message, inline_query } = req;\n\n    let response = {}; //Inicializando nosso objeto de resposta. Que servirá para os dois tipos de resposta.\n\n    //Respondendo comandos inline.\n    if (inline_query) {\n        //Comandos inline esperam um array com várias respostas, então vamos armazenar na variável results.\n        const results = [];\n\n        //O formato desta resposta pode ser referida aqui https://core.telegram.org/bots/api#answerinlinequery\n        //Por hora apenas uma resposta é o suficiente então vou inserir apenas:\n        results.push({\n            type: &quot;Article&quot;,\n            id: results.length, //O ID da resposta.\n            title: `Olá ${inline_query.from.first_name} ${inline_query.from.last_name}`, //O título da resposta.\n            thumb_url:\n                &quot;https://raw.githubusercontent.com/Jorgen-Jr/Jorgen-Jr.github.io/main/src/assets/image/logo.png&quot;, //Imagem que irá aparecer na request.\n            description: `Olá ${inline_query.from.first_name} ${inline_query.from.last_name}`,\n            // Em seguida a resposta da inline query, que será entregue caso o usuário escolha esta resposta.\n            input_message_content: {\n                parse_mode: &quot;HTML&quot;,\n                message_text: `Olá ${inline_query.from.first_name} ${inline_query.from.last_name}, ${inline_query.query}`,\n            },\n        });\n\n        response = {\n            inline_query_id: inline_query.id,\n            results,\n        };\n\n        await answerInlineQuery(response);\n    }\n\n    //Respondendo mensagens.\n    else if (message) {\n        const chatId = message.chat.id;\n\n        const parse_mode = &quot;HTML&quot;;\n\n        //O formato da resposta pode ser referida aqui: https://core.telegram.org/bots/api#sendmessage\n        response = {\n            chat_id: chatId,\n            text: `Olá ${message.from.first_name} ${message.from.last_name}.`,\n            parse_mode,\n        };\n\n        await sendMessage(response);\n    }\n\n    //Função para enviar as mensagens\n    async function sendMessage(response) {\n        return await axios.post(\n            &quot;https://ola-usuario-bot.netlify.app/.netlify/functions/sendMessage&quot;,\n            response\n        );\n    }\n\n    //Função para responder comandos inline\n    async function answerInlineQuery(response) {\n        return await axios.post(\n            &quot;https://ola-usuario-bot.netlify.app/.netlify/functions/answerInlineQuery&quot;,\n            response\n        );\n    }\n\n    return {\n        statusCode: 200,\n\n        body: JSON.stringify(response),\n    };\n};</code>\n        </deckgo-highlight-code>\n<h3 id=\"função-answerinlinequery\" style=\"position:relative;\"><a href=\"#fun%C3%A7%C3%A3o-answerinlinequery\" aria-label=\"função answerinlinequery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Função answerInlineQuery</h3>\n<p>Vamos fazer uma função genérica para responder as inline queries respeitando a documentação do Telegram, sendo assim como já estamos recebendo a estrutura corretamente da função principal, nosso código pode ficar assim.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const axios = require(&quot;axios&quot;);\n\nexports.handler = async (event) =&gt; {\n    console.log(&quot;Enviando o resultado da inline query.&quot;);\n\n    const body = event.body; //Receber o resultado da request resultante do bot.js\n\n    const response = JSON.parse(body);\n\n    //Criar URL de acesso usando as variáveis de ambiente.\n    const bot_url = &quot;https://api.telegram.org/bot&quot; + process.env.BOT_TOKEN;\n\n    //Enviar a resposta de volta para o telegram.\n    const res = await axios.post(bot_url + &quot;/answerInlineQuery&quot;, response);\n\n    return {\n        statusCode: res.status,\n        body: JSON.stringify({ message: &quot;Query finalizada.&quot; }),\n    };\n};</code>\n        </deckgo-highlight-code>\n<h3 id=\"função-sendmessage\" style=\"position:relative;\"><a href=\"#fun%C3%A7%C3%A3o-sendmessage\" aria-label=\"função sendmessage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Função sendMessage</h3>\n<p>Partindo da mesma idéia da função anterior, nossa request só irá alterar o método usado na chamada da api do telegram.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const axios = require(&quot;axios&quot;);\n\nexports.handler = async (event) =&gt; {\n    console.log(&quot;Respondendo ao usuário.&quot;);\n\n    const body = event.body; //Receber o resultado da request resultante do bot.js\n\n    const response = JSON.parse(body);\n\n    //Criar URL de acesso usando as variáveis de ambiente.\n    const bot_url = &quot;https://api.telegram.org/bot&quot; + process.env.BOT_TOKEN;\n\n    //Enviar a resposta de volta para o telegram.\n    const res = await axios.post(bot_url + &quot;/sendMessage&quot;, response);\n\n    return {\n        statusCode: res.status,\n        body: JSON.stringify({ message: &quot;Message sent.&quot; }),\n    };\n};</code>\n        </deckgo-highlight-code>\n<h2 id=\"subindo-o-código-para-o-netlify\" style=\"position:relative;\"><a href=\"#subindo-o-c%C3%B3digo-para-o-netlify\" aria-label=\"subindo o código para o netlify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subindo o Código Para o Netlify</h2>\n<p>Faça o upload do seu código no github, gitlab ou bitbucket, no meu caso estarei usando o github. Este passo é necesário pois o netlify requere que seja ativado a integração de implantação contínua para usar as cloud functions.</p>\n<p>Acesse o <a href=\"https://app.netlify.com/start\">netlify</a> e indique qual repositório ele vai usar.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-14-47-05.png\" alt=\"Criando o website no netlify.\" title=\"Criando o website no netlify.\"></p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-14-48-12.png\" alt=\"Criando o website no netlify pt.2\" title=\"Criando o website no netlify pt.2\"></p>\n<p>Com as configurações padrão, ele irá fazer o primeiro deploy, sem misterios, eu apenas troquei o nome padrão do site para ficar mais fácil de acessar. Em “Site Settings” e em Site information deve ter um botão chamado “Change Site Name”.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-14-50-21.png\" alt=\"Trocando o nome do site.\" title=\"Trocando o nome do site.\"></p>\n<p>E também precisamos adcionar o TOKEN do bot nas variáveis de ambiente, para que não fiquem expostas no nosso repositório.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-20-14-55-16.png\" alt=\"Adcionando o token de acesso.\" title=\"Adcionando o token de acesso.\"></p>\n<h2 id=\"configurando-webhook\" style=\"position:relative;\"><a href=\"#configurando-webhook\" aria-label=\"configurando webhook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando WebHook</h2>\n<p><a href=\"https://github.com/Jorgen-Jr/ola_usuario_bot/blob/master/docs/insomnia.json\">Eu deixei preparado um arquivo do insomnia que vocês podem usar para esta parte caso achem mais fácil.</a></p>\n<p>Estarei usando as variáveis de ambiente do insonmia e elas estão configuradas assim:</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-22-09-29-07.png\" alt=\"Variáveis do insomnia.\" title=\"Variáveis do insomnia.\"></p>\n<p>Então podemos ir na pasta Telegram e executar a rota <code class=\"language-text\">setWebhook</code> como a seguir:</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-22-09-31-05.png\" alt=\"Executando o setWebhook.\" title=\"Executando o setWebhook.\"></p>\n<p>Com isso nosso bot já deve estar funcionando, mas podemos confirmar que o webhook foi aceito executando o <code class=\"language-text\">getWebhookInfo.</code></p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-22-09-33-18.png\" alt=\"getWebhookInfo\" title=\"getWebhookInfo\"></p>\n<h2 id=\"bot-em-funcionamento\" style=\"position:relative;\"><a href=\"#bot-em-funcionamento\" aria-label=\"bot em funcionamento permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bot em Funcionamento</h2>\n<p>Agora se acessarmos o bot ele já deve nos responder com “Olá, <code class=\"language-text\">primeiro nome</code> e <code class=\"language-text\">ultimo nome</code>” para qualquer mensagem que enviarmos no chat dele, ou para qualquer comando inline.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-22-09-38-06.png\" alt=\"Mensagem.\" title=\"Mensagem.\"></p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-22-09-39-27.png\" alt=\"Comando inline\" title=\"Comando inline.\"></p>\n<p>Claro, este é apenas um projeto simples demonstrando como o netlify functions pode ser usada com os bots do telegram, mas é possível fazer bastante coisa com apenas isso. Você pode ler sobre alguns de meus bots que funcionam usando este mesmo método <a href=\"https://jorgen-jr.github.io/blog/2021-05-11-sobre-ndefinitionbot/\">aqui sobre o meu bot de dicionário</a> e <a href=\"https://jorgen-jr.github.io/blog/2021-05-11-sobre-meus-bots/\">aqui sobre outros bots que desenvolvi</a>. Todos estão com o código fonte liberados no meu perfil no github.</p>\n<h2 id=\"disposições-finais\" style=\"position:relative;\"><a href=\"#disposi%C3%A7%C3%B5es-finais\" aria-label=\"disposições finais permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disposições Finais</h2>\n<p>As cloud functions são ótimas pra isso por não precisarem de um servidor dedicado rodando 24/7 para que o bot funcione, mas são limitadas as funções de resposta rápida pois elas devem respeitar o limite de resposta em 10 segundos, o mesmo limite também é usado para respostas de inline_query então esse limite é aceitável, mas devemos ter em mente de que podemos experienciar as cold starts e a depender do tamanho da função isso pode impactar negativamente o funcionamento do bot causando problemas de resposta e time-outs, por isso para aplicações mais complexas ou de longa execução essa abordagem é de longe a melhor indicada.</p>\n<p><img src=\"/images/uploads/screenshot-from-2021-10-25-15-18-27.png\" alt=\"Execuçao da funçao principal.\" title=\"Execuçao da funçao principal.\"></p>\n<p>Porem, para aplicações simples até que isso cumpre sua função e é completamente gratuíto então pode ser uma alternativa atraente para alguns. E caso contrário por estar em javascript é bem fácil de reescrever tudo em nodejs e abrir um servidor dedicado somente para isso.</p>","excerpt":"Neste tutorial vou mostrar o passo a passo de como criar seu bot de telegram usando javascript e o serviço serverless netlify functions.\nAo final do post vou deixar nas disposições finais as desvantagens de usar este método, apesar de que o serviço…","frontmatter":{"cover":"/images/uploads/pexels-pixabay-209831.jpg","date":"27/10/2021 14:46","isBanner":false,"layout":"post","special":false,"title":"Desenvolvendo um Bot para o Telegram usando Netlify Functions"},"fields":{"slug":"/blog/2021-10-20-desenvolvendo-um-bot-para-o-telegram-usando-netlify-functions/"}},"previous":{"fields":{"slug":"/blog/2021-07-20-entendendo-numeros-flutuantes/"},"frontmatter":{"title":"Pontos Flutuantes e o padrão IEEE 754"}},"next":{"fields":{"slug":"/blog/2021-11-10-criando-um-webscrapper-com-python/"},"frontmatter":{"title":"Criando um WebScrapper com Python"}}},"pageContext":{"id":"f8f10298-5d6a-5b84-9b95-b247b398a17d","previousPostId":"c8c4c7b1-84e1-516a-a2c3-70de108ebb12","nextPostId":"67d1c0fc-677d-52d1-8a6b-67aca49f6fb0"}},
    "staticQueryHashes": ["712016698"]}