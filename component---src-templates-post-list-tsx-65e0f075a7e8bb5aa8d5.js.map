{"version":3,"file":"component---src-templates-post-list-tsx-65e0f075a7e8bb5aa8d5.js","mappings":"yPAkBO,MAAMA,EAAoCC,IAG3C,IAFFC,KAAMA,EAAI,UACVC,GACHF,EACG,MAAMG,EAAUF,aAAI,EAAJA,EAAME,QAEtB,OACIC,EAAAA,cAAAA,EAAAA,SAAA,KACKH,EACGG,EAAAA,cAACC,EAAAA,EAAK,CACFC,aAAa,MACbC,EACIJ,GAEMD,EADA,OAGA,CAAC,OAAQ,OAAQ,OAAQ,OAEnCM,EAAE,OACFC,SAAS,SACTC,WACIP,GAAWF,EAAKU,SACV,SACAC,EAAAA,EAAAA,IAAkB,QAAS,WAErCC,SAAS,WACTC,UACIZ,EACM,CAAC,SAAU,SAAU,MAAO,OAC5B,SAEVa,eAAgBZ,EAAU,SAAW,OACrCa,OAAQb,EAAU,OAAS,MAE3BC,EAAAA,cAACa,EAAAA,EAAG,CACAC,UACIhB,EACM,CAAC,OAAQ,OAAQ,QAAS,SAC1B,QAEViB,SACIjB,EACM,CAAC,OAAQ,OAAQ,QAAS,QAAS,SACnC,SAGVE,EAAAA,cAACgB,EAAAA,KAAI,CACDC,GAAIpB,EAAKqB,MAGTlB,EAAAA,cAACmB,EAAAA,EAAK,CACFC,IAAKvB,EAAKwB,MACVC,IAAKzB,EAAK0B,MACVC,QAAS3B,EAAKU,SAAW,QAAU,OACnCkB,MAAO,CAAEC,UAAW,OAAQC,MAAO,QACnCzB,aAAcH,EAAU,MAAQ,QAChCa,OAAQb,EAAU,KAAO,WAIrCC,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAIpB,EAAKqB,MACXlB,EAAAA,cAACa,EAAAA,EAAGe,OAAAC,OAAA,GACKhC,EAAKU,SACJ,CACIuB,QAAS,QAEb,KAAI,CACVC,EAAE,cAEF/B,EAAAA,cAACgC,EAAAA,EAAI,CACDC,GAAG,OACHC,SAAS,OACTC,OAAO3B,EAAAA,EAAAA,IAAkB,OAAQ,QACjC4B,WAAW,UAEV,GAAGvC,EAAKwC,SAASC,iBAErB,MACDtC,EAAAA,cAACgC,EAAAA,EAAI,CACDC,GAAG,OACHC,SAAS,OACTC,OAAO3B,EAAAA,EAAAA,IAAkB,OAAQ,SAEhC,GAAGX,EAAK0C,aAEbvC,EAAAA,cAACwC,EAAAA,EAAO,CAACN,SAAS,QAAQrC,EAAK0B,OAC/BvB,EAAAA,cAACyC,EAAAA,EAAI,CACDC,SAAU,EACV/B,eAAe,gBACfgC,QAAQ,OAER3C,EAAAA,cAACa,EAAAA,EAAG,CACA+B,GAAG,OACHC,GAAG,OACHV,OAAO3B,EAAAA,EAAAA,IAAkB,OAAQ,QACjCsC,OAAQ,GAER9C,EAAAA,cAAA,OACI+C,UAAU,qBACVC,wBAAyB,CACrBC,OAAQpD,EAAKqD,WAElB,IACHlD,EAAAA,cAACgC,EAAAA,EAAI,CACDP,MAAO,CACHU,OAAO3B,EAAAA,EAAAA,IACH,WACA,eAGX,iBAQrB,KACL,EAIX,W,8KCaA,UAzIA,SAA0B2C,GACtB,MAAM,KAAEC,GAASD,GAEX,YAAEE,EAAW,SAAEC,GAAaH,EAAMI,YAElCC,EAAQJ,EAAKK,kBAAkBC,MAE/BC,EAA0B,IAAhBN,EACVO,EAASP,IAAgBC,EACzBO,EACFR,EAAc,GAAM,EACd,SACA,UAAYA,EAAc,GAAGS,WACjCC,EAAW,UAAYV,EAAc,GAAGS,WAExCE,EAAoBR,EAAMS,KAAKC,IAChB,CACb3B,UAAW2B,EAAKC,KAAKC,YAAYC,KACjCnD,KAAMgD,EAAKC,KAAKG,OAAOpD,KACvBK,MAAO2C,EAAKC,KAAKC,YAAY7C,MAC7BF,MAAO6C,EAAKC,KAAKC,YAAY/C,MAC7B6B,QAASgB,EAAKC,KAAKI,QACnBhE,SAAU2D,EAAKC,KAAKC,YAAY7D,SAChCR,QAASmE,EAAKC,KAAKC,YAAYrE,QAC/BsC,SAAU6B,EAAKC,KAAKC,YAAY/B,aAKxC,OACIrC,EAAAA,cAACwE,EAAAA,EAAM,CAACC,MAAO,CAAEC,OAAQ,EAAGC,KAAM,SAC9B3E,EAAAA,cAAC4E,EAAAA,EAAG,CACArD,MAAO,OACPsD,YACI,oEAEJC,KAAK,UAGT9E,EAAAA,cAACa,EAAAA,EAAG,CACAkC,UAAU,UACVH,GAAG,OACHmC,GAAG,OACHhD,EAAG,CAAC,SAAU,IAAK,IAAK,IAAK,YAG7B/B,EAAAA,cAACyC,EAAAA,EAAI,CAACE,QAAQ,SAASoC,GAAG,OAAOC,GAAG,QAChChF,EAAAA,cAACyC,EAAAA,EAAI,CAACwC,EAAE,OAAOC,WAAW,UACtBlF,EAAAA,cAACmF,EAAAA,EAAU,CACPC,UAAWpF,EAAAA,cAACqF,EAAAA,EAAgB,CAAClD,MAAM,aACnCC,WAAW,SACXF,SAAS,MAETlC,EAAAA,cAACsF,EAAAA,EAAc,KACXtF,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,MAAK,WAElBjB,EAAAA,cAACsF,EAAAA,EAAc,CAACC,eAAa,GACzBvF,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,SAAQ,YAMjCjB,EAAAA,cAACyC,EAAAA,EAAI,CACDV,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,WAC7BpB,eAAe,gBACf6E,UAAU,SACVC,SAAS,QAERzB,EAAUC,KAAI,CAACyB,EAAOhB,IACnB1E,EAAAA,cAACL,EAAAA,SAAQ,CACLgG,IAAK,QAAUjB,EACf7E,KAAM6F,EACN5F,UAAqB,IAAV4E,QAO3B1E,EAAAA,cAAC4F,EAAAA,EAAM,CAACzF,EAAE,OAAOQ,eAAe,eAAeoB,EAAE,QAC3C4B,EAuBE3D,EAAAA,cAACa,EAAAA,EAAG,MAtBJb,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAI4C,EAAUgC,IAAI,YACpB7F,EAAAA,cAACyC,EAAAA,EAAI,CAACyC,WAAW,UACblF,EAAAA,cAAC8F,EAAAA,EAAe,CACZC,QAAQ,OACR5D,OAAO3B,EAAAA,EAAAA,IAAkB,UAAW,aAEvC,KACDR,EAAAA,cAACgC,EAAAA,EAAI,CACDC,GAAG,OACH+D,OAAO,OACP5D,WAAW,SACXF,SAAS,SACTJ,QAAQ,OACRoD,WAAW,SACX/C,OAAO3B,EAAAA,EAAAA,IAAkB,UAAW,WACpCyF,WAAW,OACd,qBASXrC,EAuBE5D,EAAAA,cAACa,EAAAA,EAAG,MAtBJb,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAI8C,EAAU8B,IAAI,WACpB7F,EAAAA,cAACyC,EAAAA,EAAI,CAACyC,WAAW,UACblF,EAAAA,cAACgC,EAAAA,EAAI,CACDC,GAAG,OACH+D,OAAO,OACP5D,WAAW,SACXF,SAAS,SACTJ,QAAQ,OACRoD,WAAW,SACX/C,OAAO3B,EAAAA,EAAAA,IAAkB,UAAW,WACpCyF,WAAW,OACd,kBAGA,KACDjG,EAAAA,cAACqF,EAAAA,EAAgB,CACbU,QAAQ,OACR5D,OAAO3B,EAAAA,EAAAA,IAAkB,UAAW,gBAUpE,C,uDCtJA,MAAMsF,GAAkB,E,QAAA,GAAW,CACjCI,EAAG,gDACHC,YAAa,mB,2FCDf,MAAOC,EAA0BC,IAAuB,OAAc,CACpE1B,KAAM,0BACN2B,aAAc,+G,mJCEhB,MAAMC,GAAsB,QAC1B,SAA8BpD,EAAOqD,GACnC,MAAM,QAAEC,KAAYC,GAASvD,EACvBwD,GAAS,SACTC,GAAkB,QAAY,CAClCC,GAAIJ,KACDE,EAAOvB,YAEZ,OAAuB,IAAA0B,KACrB,IAAOC,KACP,CACEP,MACAQ,KAAM,kBACHN,EACHO,MAAOL,GAGb,IAEFL,EAAoBJ,YAAc,sBCflC,MAAMb,GAAiB,QACrB,SAAyBnC,EAAOqD,GAC9B,MAAM,cACJjB,EAAa,UACbH,EAAS,YACT8B,EAAW,QACXT,EAAO,SACPU,EAAQ,UACRpE,KACG2D,GACDvD,EAEEiE,GADgB,OAAiBD,GACVlD,KAAKoD,GAC5BA,EAAMC,OAAS,KACV,IAAAC,cAAaF,EAAO,CACzB9B,kBAGA8B,EAAMC,OAASf,GACV,IAAAgB,cAAaF,EAAO,CACzBZ,UACAU,SAAUE,EAAMlE,MAAMgE,UAAY/B,IAG/BiC,IAEHV,GAAS,SACTa,GAAa,QAAY,CAC7B1F,QAAS,cACToD,WAAY,YACTyB,EAAOzC,OAENuD,GAAa,EAAAC,EAAAA,IAAG,+BAAgC3E,GACtD,OAAuB,IAAA4E,MAAK,IAAOC,GAAI,CAAEpB,MAAKzD,UAAW0E,KAAef,EAAMO,MAAOO,EAAYL,SAAU,CACzGC,GACCF,IAA+B,IAAAJ,KAAIP,EAAqB,CAAEE,UAASU,SAAU/B,MAElF,IAEFE,EAAea,YAAc,gB,2GC3C7B,MAAM0B,GAAiB,QACrB,SAAyB1E,EAAOqD,GAC9B,MAAM,cAAEjB,EAAa,GAAEtD,EAAE,UAAEc,EAAS,KAAE+E,KAASpB,GAASvD,EAClDwD,GAAS,SACToB,EAAc,CAClBvB,MACAvE,KACAc,WAAW,IAAA2E,IAAG,0BAA2B3E,MACtC2D,GAEL,OAAInB,GACqB,IAAAuB,KAAI,IAAOC,KAAM,CAAE,eAAgB,OAAQE,MAAON,EAAOqB,QAASD,KAEpE,IAAAjB,KAAI,IAAOmB,EAAG,CAAEhB,MAAON,EAAOqB,KAAMF,UAASC,GACtE,IAEFF,EAAe1B,YAAc,gB,oJCb7B,MAAMhB,GAAa,QACjB,SAAqBhC,EAAOqD,GAC1B,MAAMG,GAAS,OAAoB,aAAcxD,GAC3C+E,GAAW,OAAiB/E,IAC5B,SACJgE,EAAQ,QACRV,EAAU,SAAQ,UAClBrB,EAAY,IAAG,UACfrC,EAAS,UACToF,KACGzB,GACDwB,EACEE,GAAgB,OAAiBjB,GACjCkB,EAAQD,EAAcE,OACtBlB,EAASgB,EAAcnE,KAC3B,CAACoD,EAAO3C,KAAU,IAAA6C,cAAaF,EAAO,CACpCjC,YACAqB,UACAS,YAAamB,IAAU3D,EAAQ,MAG7B+C,GAAa,IAAAC,IAAG,oBAAqB3E,GAC3C,OAAuB,IAAA+D,KACrB,IAAOyB,IACP,CACE/B,MACA,aAAc,aACdzD,UAAW0E,EACXR,MAAON,EAAO6B,aACX9B,EACHS,UAA0B,IAAAL,KAAI,IAA0B,CAAE2B,MAAO9B,EAAQQ,UAA0B,IAAAL,KACjG,IAAO4B,GACP,CACE3F,UAAW,6BACRoF,EACHlB,MAAO,CACLnF,QAAS,OACToD,WAAY,YACTyB,EAAOgC,MAEZxB,SAAUC,OAKpB,IAEFjC,EAAWgB,YAAc,Y,+ECpDzB,MAAMP,GAAS,E,QAAA,IAAW,CAACzC,EAAOqD,KAAwB,IAAAM,KAAI,IAAO,CAAE8B,MAAO,YAAazF,EAAOzC,UAAW,MAAO8F,UACpHZ,EAAOO,YAAc,Q,4GCFrB,MAAM0C,EAAa1F,IAA0B,IAAA2D,KAC3C,IAAOgC,IACP,CACE/F,UAAW,wBACRI,EACH8D,MAAO,CACLnF,QAAS,eACTiH,KAAM,WACNC,SAAU,KACP7F,EAAa,SAItB0F,EAAU1C,YAAc,Y,cCfJvE,OAAOqH,OAAO,CAChC,OACA,KACA,KACA,KACA,KACA,QCCF,MAAMhJ,GAAQ,E,QAAA,IAAW,CAACkD,EAAOqD,KAC/B,MAAM,SACJ0C,EACAxI,UAAWyI,EAAa,MACxBP,EAAK,QACLQ,EAAO,QACP3C,EAAU,SAAQ,KAClB4C,EAAI,SACJlC,EAAQ,QACRmC,EAAO,UACPvG,EAAS,mBACTwG,KACG7C,GACDvD,EACEzC,EAAYwI,EAAW,MAAQC,GAAiB,SAChDK,GAAe,IAAAC,UACnB,ICtBJ,SAA0BC,GACxB,MAAM,QAAEjD,EAAO,UAAE/F,GAAcgJ,EACzBC,EAAgB,CACpBC,OAAQ,CACNC,GAAIpD,EACJI,GAAI,EACJiD,gBAAiB,EACjBC,kBAAmB,OAErB,iBAAkB,CAChBF,GAAIpD,EACJI,GAAI,EACJiD,gBAAiB,EACjBC,kBAAmB,OAErBC,IAAK,CACHnD,GAAIJ,EACJoD,GAAI,EACJC,gBAAiB,MACjBC,kBAAmB,GAErB,cAAe,CACblD,GAAIJ,EACJoD,GAAI,EACJC,gBAAiB,MACjBC,kBAAmB,IAGvB,MAAO,CACL,KFtBmBE,EEuBjBvJ,EFvBuBwJ,EEwBtBzB,GAAUkB,EAAclB,GFvBzB0B,MAAMC,QAAQH,GACTA,EAAKhG,KAAKC,GAAkB,OAATA,EAAgB,KAAOgG,EAAOhG,MAEtD,EAAAmG,EAAA,IAASJ,GACJrI,OAAO0I,KAAKL,GAAMM,QAAO,CAACC,EAAQ7E,KACvC6E,EAAO7E,GAAOuE,EAAOD,EAAKtE,IACnB6E,IACN,CAAC,GAEM,MAARP,EACKC,EAAOD,GAET,OAbT,IAAuBA,EAAMC,CE2B7B,CDZUO,CAAiB,CAAEhE,UAAS/F,eAClC,CAAC+F,EAAS/F,IAENgK,IAAepB,EACfqB,GAAqBpB,IAAuBmB,EAC5CtD,GAAS,IAAAqC,UAAQ,KACrB,MAAMrB,GAAgB,OAAiBjB,GACvC,OAAOwD,EAAoBvC,EAAgBA,EAAcnE,KAAI,CAACoD,EAAO3C,KACnE,MAAMiB,OAA2B,IAAd0B,EAAM1B,IAAsB0B,EAAM1B,IAAMjB,EACrDd,EAASc,EAAQ,IAAM0D,EAAcE,OAErCsC,EAASrB,GADsB,IAAAzC,KAAI+B,EAAW,CAAE1B,SAAUE,GAAS1B,GACtB0B,EACnD,IAAKqD,EACH,OAAOE,EACT,MAAMC,GAAgB,IAAAtD,cACpB+B,EACA,CACErC,MAAOuC,IAGLsB,EAAWlH,EAAS,KAAOiH,EACjC,OAAuB,IAAAlD,MAAK,EAAAoD,SAAU,CAAE5D,SAAU,CAChDyD,EACAE,IACGnF,EAAI,GACT,GACD,CACD2D,EACAE,EACAkB,EACAC,EACApB,EACApC,IAEIM,GAAa,EAAAC,EAAAA,IAAG,eAAgB3E,GACtC,OAAuB,IAAA+D,KACrB,IAAOgC,IACP,CACEtC,MACA1E,QAAS,OACToD,WAAY0D,EACZjI,eAAgByI,EAChB4B,cAAetK,EACf+E,SAAU4D,EACV4B,IAAKP,OAAa,EAASjE,EAC3B1D,UAAW0E,KACRf,EACHS,SAAUC,GAEb,IAEHnH,EAAMkG,YAAc,O","sources":["webpack://jorge.room/./src/pages/posts/PostCard.tsx","webpack://jorge.room/./src/templates/post-list.tsx","webpack://jorge.room/./node_modules/@chakra-ui/icons/dist/esm/ChevronLeft.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-context.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-separator.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-item.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-link.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/h-stack.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack-item.mjs","webpack://jorge.room/./node_modules/@chakra-ui/utils/dist/esm/responsive.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack.utils.mjs"],"sourcesContent":["import {\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Stack,\n    Text,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport { Post } from \"../../types\";\n\ninterface PostCardProps {\n    post: Post;\n    fullWidth: Boolean;\n}\n\nexport const PostCard: React.FC<PostCardProps> = ({\n    post: post,\n    fullWidth,\n}) => {\n    const special = post?.special;\n\n    return (\n        <>\n            {post ? (\n                <Stack\n                    borderRadius=\"5px\"\n                    w={\n                        special\n                            ? \"100%\"\n                            : fullWidth\n                            ? \"100%\"\n                            : [\"100%\", \"100%\", \"100%\", \"29%\"]\n                    }\n                    m=\"20px\"\n                    overflow=\"hidden\"\n                    background={\n                        special && post.isBanner\n                            ? \"unset\"\n                            : useColorModeValue(\"white\", \"#102435\")\n                    }\n                    position=\"relative\"\n                    direction={\n                        fullWidth\n                            ? [\"column\", \"column\", \"row\", \"row\"]\n                            : \"column\"\n                    }\n                    justifyContent={special ? \"center\" : \"auto\"}\n                    shadow={special ? \"none\" : \"xl\"}\n                >\n                    <Box\n                        maxHeight={\n                            fullWidth\n                                ? [\"100%\", \"100%\", \"250px\", \"250px\"]\n                                : \"unset\"\n                        }\n                        maxWidth={\n                            fullWidth\n                                ? [\"100%\", \"100%\", \"400px\", \"500px\", \"500px\"]\n                                : \"unset\"\n                        }\n                    >\n                        <Link\n                            to={post.slug}\n                            // style={{  }}\n                        >\n                            <Image\n                                src={post.cover}\n                                alt={post.title}\n                                loading={post.isBanner ? \"eager\" : \"lazy\"}\n                                style={{ marginTop: \"-25%\", width: \"100%\" }}\n                                borderRadius={special ? \"7px\" : \"unset\"}\n                                shadow={special ? \"md\" : \"none\"}\n                            />\n                        </Link>\n                    </Box>\n                    <Link to={post.slug}>\n                        <Box\n                            {...(post.isBanner\n                                ? {\n                                      display: \"none\",\n                                  }\n                                : null)}\n                            p=\"10px 20px\"\n                        >\n                            <Text\n                                as=\"span\"\n                                fontSize=\"12px\"\n                                color={useColorModeValue(\"#666\", \"#CCC\")}\n                                fontWeight=\"bolder\"\n                            >\n                                {`${post.category.toUpperCase()}`}\n                            </Text>\n                            {\" • \"}\n                            <Text\n                                as=\"span\"\n                                fontSize=\"12px\"\n                                color={useColorModeValue(\"#666\", \"#CCC\")}\n                            >\n                                {`${post.post_date}`}\n                            </Text>\n                            <Heading fontSize=\"25px\">{post.title}</Heading>\n                            <Flex\n                                flexGrow={1}\n                                justifyContent=\"space-between\"\n                                flexDir=\"row\"\n                            >\n                                <Box\n                                    mt=\"10px\"\n                                    pb=\"25px\"\n                                    color={useColorModeValue(\"#666\", \"#CCC\")}\n                                    zIndex={0}\n                                >\n                                    <div\n                                        className=\"aviso-content-list\"\n                                        dangerouslySetInnerHTML={{\n                                            __html: post.content,\n                                        }}\n                                    />{\" \"}\n                                    <Text\n                                        style={{\n                                            color: useColorModeValue(\n                                                \"darkblue\",\n                                                \"lightblue\"\n                                            ),\n                                        }}\n                                    >\n                                        ler mais\n                                    </Text>\n                                </Box>\n                            </Flex>\n                        </Box>\n                    </Link>\n                </Stack>\n            ) : null}\n        </>\n    );\n};\n\nexport default PostCard;\n","import { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n    Box,\n    Breadcrumb,\n    BreadcrumbItem,\n    Flex,\n    HStack,\n    Text,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { graphql, Link } from \"gatsby\";\nimport React from \"react\";\nimport { PostCard } from \"../pages/posts/PostCard\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport { Post } from \"../types\";\n\nfunction PostListTemplate(props) {\n    const { data } = props;\n\n    const { currentPage, numPages } = props.pageContext;\n\n    const posts = data.allMarkdownRemark.edges;\n\n    const isFirst = currentPage === 1;\n    const isLast = currentPage === numPages;\n    const prevPage =\n        currentPage - 1 === 1\n            ? \"/blog/\"\n            : \"/blog/\" + (currentPage - 1).toString();\n    const nextPage = \"/blog/\" + (currentPage + 1).toString();\n\n    const post_list: Post[] = posts.map((item) => {\n        let post: Post = {\n            post_date: item.node.frontmatter.date,\n            slug: item.node.fields.slug,\n            title: item.node.frontmatter.title,\n            cover: item.node.frontmatter.cover,\n            content: item.node.excerpt,\n            isBanner: item.node.frontmatter.isBanner,\n            special: item.node.frontmatter.special,\n            category: item.node.frontmatter.category,\n        };\n        return post;\n    });\n\n    return (\n        <Layout slide={{ index: -1, name: \"blog\" }}>\n            <SEO\n                title={\"Blog\"}\n                description={\n                    \"Jorge's Room - Blog posts e comunicados. Veja o conteudo postado.\"\n                }\n                lang=\"pt-BR\"\n            />\n\n            <Box\n                className=\"wrapper\"\n                mt=\"80px\"\n                mb=\"80px\"\n                p={[\"0 10px\", \"0\", \"0\", \"0\", \"0 100px\"]}\n            >\n                {/* Breadcrumb e cabeçalho */}\n                <Flex flexDir=\"column\" mb=\"35px\" ml=\"15px\">\n                    <Flex h=\"50px\" alignItems=\"center\">\n                        <Breadcrumb\n                            separator={<ChevronRightIcon color=\"gray.500\" />}\n                            fontWeight=\"medium\"\n                            fontSize=\"md\"\n                        >\n                            <BreadcrumbItem>\n                                <Link to=\"/#\">Início</Link>\n                            </BreadcrumbItem>\n                            <BreadcrumbItem isCurrentPage>\n                                <Link to=\"/blog\">Blog</Link>\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                    </Flex>\n                </Flex>\n\n                <Flex\n                    p={[\"0\", \"0\", \"0\", \"0\", \"0\", \"0 100px\"]}\n                    justifyContent=\"space-between\"\n                    alignSelf=\"center\"\n                    flexWrap=\"wrap\"\n                >\n                    {post_list.map((aviso, index) => (\n                        <PostCard\n                            key={\"aviso\" + index}\n                            post={aviso}\n                            fullWidth={index === 0}\n                        />\n                    ))}\n                </Flex>\n            </Box>\n\n            {/* Navegar entre próximo post e anterior */}\n            <HStack w=\"100%\" justifyContent=\"space-evenly\" p=\"30px\">\n                {!isFirst ? (\n                    <Link to={prevPage} rel=\"Anterior\">\n                        <Flex alignItems=\"center\">\n                            <ChevronLeftIcon\n                                boxSize=\"30px\"\n                                color={useColorModeValue(\"#053a63\", \"#e1e1e1\")}\n                            />\n                            {\"  \"}\n                            <Text\n                                as=\"span\"\n                                height=\"30px\"\n                                fontWeight=\"bolder\"\n                                fontSize=\"1.1rem\"\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                color={useColorModeValue(\"#053a63\", \"#e1e1e1\")}\n                                paddingTop=\"2px\"\n                            >\n                                Página Anterior\n                            </Text>\n                        </Flex>\n                    </Link>\n                ) : (\n                    <Box></Box>\n                )}\n\n                {!isLast ? (\n                    <Link to={nextPage} rel=\"Próximo\">\n                        <Flex alignItems=\"center\">\n                            <Text\n                                as=\"span\"\n                                height=\"30px\"\n                                fontWeight=\"bolder\"\n                                fontSize=\"1.1rem\"\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                color={useColorModeValue(\"#053a63\", \"#e1e1e1\")}\n                                paddingTop=\"2px\"\n                            >\n                                Próxima Página\n                            </Text>\n                            {\"  \"}\n                            <ChevronRightIcon\n                                boxSize=\"30px\"\n                                color={useColorModeValue(\"#053a63\", \"#e1e1e1\")}\n                            />\n                        </Flex>\n                    </Link>\n                ) : (\n                    <Box></Box>\n                )}\n            </HStack>\n        </Layout>\n    );\n}\n\nexport default PostListTemplate;\n\nexport const pageQuery = graphql`\n    query PostFeed($skip: Int!, $limit: Int!) {\n        site {\n            siteMetadata {\n            title\n            }\n        }\n        allMarkdownRemark(\n            sort: {frontmatter: {date: DESC}}\n            limit: $limit\n            skip: $skip\n            filter: {frontmatter: {layout: {eq: \"post\"}}}\n        ) {\n            edges {\n            node {\n                excerpt(format: HTML, pruneLength: 200)\n                fields {\n                slug\n                }\n                frontmatter {\n                cover\n                date(formatString: \"DD/MM/YYYY HH:mm\")\n                isBanner\n                layout\n                special\n                title\n                category\n                }\n            }\n            }\n        }\n        }\n`;\n","import { createIcon } from '@chakra-ui/react';\n\nconst ChevronLeftIcon = createIcon({\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\",\n  displayName: \"ChevronLeftIcon\"\n});\n\nexport { ChevronLeftIcon };\n","'use client';\nimport { createContext } from '@chakra-ui/utils';\n\nconst [BreadcrumbStylesProvider, useBreadcrumbStyles] = createContext({\n  name: `BreadcrumbStylesContext`,\n  errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Breadcrumb />\" `\n});\n\nexport { BreadcrumbStylesProvider, useBreadcrumbStyles };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbSeparator = forwardRef(\n  function BreadcrumbSeparator2(props, ref) {\n    const { spacing, ...rest } = props;\n    const styles = useBreadcrumbStyles();\n    const separatorStyles = defineStyle({\n      mx: spacing,\n      ...styles.separator\n    });\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ref,\n        role: \"presentation\",\n        ...rest,\n        __css: separatorStyles\n      }\n    );\n  }\n);\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\nexport { BreadcrumbSeparator };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { BreadcrumbLink } from './breadcrumb-link.mjs';\nimport { BreadcrumbSeparator } from './breadcrumb-separator.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbItem = forwardRef(\n  function BreadcrumbItem2(props, ref) {\n    const {\n      isCurrentPage,\n      separator,\n      isLastChild,\n      spacing,\n      children,\n      className,\n      ...rest\n    } = props;\n    const validChildren = getValidChildren(children);\n    const clones = validChildren.map((child) => {\n      if (child.type === BreadcrumbLink) {\n        return cloneElement(child, {\n          isCurrentPage\n        });\n      }\n      if (child.type === BreadcrumbSeparator) {\n        return cloneElement(child, {\n          spacing,\n          children: child.props.children || separator\n        });\n      }\n      return child;\n    });\n    const styles = useBreadcrumbStyles();\n    const itemStyles = defineStyle({\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      ...styles.item\n    });\n    const _className = cx(\"chakra-breadcrumb__list-item\", className);\n    return /* @__PURE__ */ jsxs(chakra.li, { ref, className: _className, ...rest, __css: itemStyles, children: [\n      clones,\n      !isLastChild && /* @__PURE__ */ jsx(BreadcrumbSeparator, { spacing, children: separator })\n    ] });\n  }\n);\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\n\nexport { BreadcrumbItem };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbLink = forwardRef(\n  function BreadcrumbLink2(props, ref) {\n    const { isCurrentPage, as, className, href, ...rest } = props;\n    const styles = useBreadcrumbStyles();\n    const sharedProps = {\n      ref,\n      as,\n      className: cx(\"chakra-breadcrumb__link\", className),\n      ...rest\n    };\n    if (isCurrentPage) {\n      return /* @__PURE__ */ jsx(chakra.span, { \"aria-current\": \"page\", __css: styles.link, ...sharedProps });\n    }\n    return /* @__PURE__ */ jsx(chakra.a, { __css: styles.link, href, ...sharedProps });\n  }\n);\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\nexport { BreadcrumbLink };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { BreadcrumbStylesProvider } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Breadcrumb = forwardRef(\n  function Breadcrumb2(props, ref) {\n    const styles = useMultiStyleConfig(\"Breadcrumb\", props);\n    const ownProps = omitThemingProps(props);\n    const {\n      children,\n      spacing = \"0.5rem\",\n      separator = \"/\",\n      className,\n      listProps,\n      ...rest\n    } = ownProps;\n    const validChildren = getValidChildren(children);\n    const count = validChildren.length;\n    const clones = validChildren.map(\n      (child, index) => cloneElement(child, {\n        separator,\n        spacing,\n        isLastChild: count === index + 1\n      })\n    );\n    const _className = cx(\"chakra-breadcrumb\", className);\n    return /* @__PURE__ */ jsx(\n      chakra.nav,\n      {\n        ref,\n        \"aria-label\": \"breadcrumb\",\n        className: _className,\n        __css: styles.container,\n        ...rest,\n        children: /* @__PURE__ */ jsx(BreadcrumbStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n          chakra.ol,\n          {\n            className: \"chakra-breadcrumb__list\",\n            ...listProps,\n            __css: {\n              display: \"flex\",\n              alignItems: \"center\",\n              ...styles.list\n            },\n            children: clones\n          }\n        ) })\n      }\n    );\n  }\n);\nBreadcrumb.displayName = \"Breadcrumb\";\n\nexport { Breadcrumb };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { Stack } from './stack.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\n\nconst HStack = forwardRef((props, ref) => /* @__PURE__ */ jsx(Stack, { align: \"center\", ...props, direction: \"row\", ref }));\nHStack.displayName = \"HStack\";\n\nexport { HStack };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { chakra } from '../system/factory.mjs';\n\nconst StackItem = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__item\",\n    ...props,\n    __css: {\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"]\n    }\n  }\n);\nStackItem.displayName = \"StackItem\";\n\nexport { StackItem };\n","import { isObject } from './is.mjs';\n\nconst breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null);\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nconst isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport { arrayToObjectNotation, breakpoints, isCustomBreakpoint, isResponsiveObjectLike, mapResponsive, objectToArrayNotation };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { useMemo, cloneElement, Fragment } from 'react';\nimport { StackItem } from './stack-item.mjs';\nimport { getDividerStyles } from './stack.utils.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp ?? \"column\";\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction]\n  );\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */ jsx(StackItem, { children: child }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider)\n        return _child;\n      const clonedDivider = cloneElement(\n        divider,\n        {\n          __css: dividerStyle\n        }\n      );\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */ jsxs(Fragment, { children: [\n        _child,\n        _divider\n      ] }, key);\n    });\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children\n  ]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      display: \"flex\",\n      alignItems: align,\n      justifyContent: justify,\n      flexDirection: direction,\n      flexWrap: wrap,\n      gap: hasDivider ? void 0 : spacing,\n      className: _className,\n      ...rest,\n      children: clones\n    }\n  );\n});\nStack.displayName = \"Stack\";\n\nexport { Stack };\n","'use client';\nimport { mapResponsive } from '@chakra-ui/utils';\n\nfunction getDividerStyles(options) {\n  const { spacing, direction } = options;\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    }\n  };\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value) => dividerStyles[value]\n    )\n  };\n}\n\nexport { getDividerStyles };\n"],"names":["PostCard","_ref","post","fullWidth","special","React","Stack","borderRadius","w","m","overflow","background","isBanner","useColorModeValue","position","direction","justifyContent","shadow","Box","maxHeight","maxWidth","Link","to","slug","Image","src","cover","alt","title","loading","style","marginTop","width","Object","assign","display","p","Text","as","fontSize","color","fontWeight","category","toUpperCase","post_date","Heading","Flex","flexGrow","flexDir","mt","pb","zIndex","className","dangerouslySetInnerHTML","__html","content","props","data","currentPage","numPages","pageContext","posts","allMarkdownRemark","edges","isFirst","isLast","prevPage","toString","nextPage","post_list","map","item","node","frontmatter","date","fields","excerpt","Layout","slide","index","name","SEO","description","lang","mb","ml","h","alignItems","Breadcrumb","separator","ChevronRightIcon","BreadcrumbItem","isCurrentPage","alignSelf","flexWrap","aviso","key","HStack","rel","ChevronLeftIcon","boxSize","height","paddingTop","d","displayName","BreadcrumbStylesProvider","useBreadcrumbStyles","errorMessage","BreadcrumbSeparator","ref","spacing","rest","styles","separatorStyles","mx","jsx","span","role","__css","isLastChild","children","clones","child","type","cloneElement","itemStyles","_className","cx","jsxs","li","BreadcrumbLink","href","sharedProps","link","a","ownProps","listProps","validChildren","count","length","nav","container","value","ol","list","align","StackItem","div","flex","minWidth","freeze","isInline","directionProp","justify","wrap","divider","shouldWrapChildren","dividerStyle","useMemo","options","dividerStyles","column","my","borderLeftWidth","borderBottomWidth","row","prop","mapper","Array","isArray","is","keys","reduce","result","getDividerStyles","hasDivider","shouldUseChildren","_child","clonedDivider","_divider","Fragment","flexDirection","gap"],"sourceRoot":""}