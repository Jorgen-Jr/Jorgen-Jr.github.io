{"version":3,"file":"component---src-pages-projects-index-tsx-822ff4a21e381bcee068.js","mappings":"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","sources":["webpack://jorge.room/./src/components/Projects/ProjectCard.tsx","webpack://jorge.room/./src/components/Projects/index.tsx","webpack://jorge.room/./src/pages/projects/index.tsx","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-context.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-separator.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-item.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-link.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack-item.mjs","webpack://jorge.room/./node_modules/@chakra-ui/utils/dist/esm/responsive.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack.utils.mjs"],"sourcesContent":["import React from \"react\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Stack,\n    Text,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { Link } from \"gatsby\";\n\nimport { Project } from \"../../types\";\n\nimport { motion } from \"framer-motion\";\n\nconst MotionStack = motion(Stack);\n\ninterface ProjectCardProps {\n    project: Project;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({\n    project: project,\n}) => {\n    return (\n        <Link\n            to={project.slug || null}\n            style={{\n                textDecoration: \"none\",\n                margin: \"15px\",\n            }}\n        >\n            <MotionStack\n                borderRadius=\"md\"\n                w={[\"auto\", \"auto\", \"300px\"]}\n                h=\"100%\"\n                overflow=\"hidden\"\n                position=\"relative\"\n                textAlign=\"center\"\n                cursor=\"pointer\"\n                shadow=\"md\"\n                background={useColorModeValue(\"white\", \"#102435\")}\n                whileHover={{\n                    scale: 1.5,\n                    zIndex: 1,\n                    transition: { duration: 0.4, type: \"spring\", bounce: 0.5 },\n                }}\n            >\n                <Flex\n                    flexDir=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    margin=\"auto\"\n                    color={useColorModeValue(\"black\", \"#FFF\")}\n                >\n                    {project.icon ? (\n                        <Image\n                            src={project.icon}\n                            alt={project.name}\n                            boxSize=\"150px\"\n                            minH=\"53px\"\n                            maxH=\"150px\"\n                            height=\"auto\"\n                            width=\"auto\"\n                            p=\"5px\"\n                        />\n                    ) : (\n                        <Flex\n                            flexGrow={1}\n                            minH=\"80px\"\n                            justifyContent=\"center\"\n                            alignContent=\"center\"\n                            flexDir=\"column\"\n                        >\n                            <Heading\n                                fontFamily=\"FiraCode\"\n                                fontWeight=\"bolder\"\n                                fontSize=\"24px\"\n                            >\n                                {project.name}\n                            </Heading>\n                        </Flex>\n                    )}\n                    <Box p=\"10px\">\n                        <Flex\n                            flexGrow={1}\n                            justifyContent=\"space-between\"\n                            flexDir=\"column\"\n                        >\n                            <Text mt=\"10px\" p=\"10px\" pb=\"25px\" zIndex={0}>\n                                {project.short_description}\n                            </Text>\n                            <Flex justifyContent=\"center\" alignItems=\"center\">\n                                Clique Para Saber Mais\n                                <Box>\n                                    <ChevronRightIcon boxSize=\"32px\" />\n                                </Box>\n                            </Flex>\n                        </Flex>\n                    </Box>\n                </Flex>\n            </MotionStack>\n        </Link>\n    );\n};\n","import { Box, Flex, Heading, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ProjectCard } from \"./ProjectCard\";\nimport { Project } from \"../../types\";\nimport { SunIcon } from \"@chakra-ui/icons\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface ServicosProps {\n    projects?: Project[];\n}\n\nexport const ProjectsFeed: React.FC<ServicosProps> = () => {\n    const { allMarkdownRemark } = useStaticQuery(graphql`\n        {\n        site {\n            siteMetadata {\n            title\n            }\n        }\n        allMarkdownRemark(\n            filter: {frontmatter: {layout: {eq: \"project\"}, active: {eq: true}}}\n            sort: {frontmatter: {date: ASC}}\n        ) {\n            nodes {\n            id\n            html\n            frontmatter {\n                layout\n                description\n                short_description\n                icon\n                name\n                title\n            }\n            fields {\n                slug\n            }\n            }\n        }\n        }\n    `);\n\n    const projects: Project[] = allMarkdownRemark.nodes.map((item) => {\n        let project: Project = {\n            icon: item.frontmatter.icon,\n            name: item.frontmatter.name,\n            description: item.frontmatter.description,\n            short_description: item.frontmatter.short_description,\n            slug: item.fields.slug,\n            category: item.frontmatter.category,\n            tags: item.frontmatter.tags,\n        };\n        return project;\n    });\n\n    return (\n        <>\n            {projects.length > 0 && (\n                <Flex\n                    minH=\"60vh\"\n                    alignItems={[\"center\"]}\n                    flexDirection={[\"column\"]}\n                >\n                    <Flex justifyContent=\"center\">\n                        <SunIcon boxSize=\"42px\" color=\"#666\" />\n                    </Flex>\n\n                    <Flex\n                        justifyContent=\"center\"\n                        textTransform=\"uppercase\"\n                        m=\"15px\"\n                        textAlign=\"center\"\n                    >\n                        <Box>\n                            <Heading fontWeight=\"light\" size=\"lg\" color={useColorModeValue(\"black\", \"#DDD\")}>\n                                <Text as=\"span\">Conheça os</Text>\n                                <Text as=\"span\" fontWeight=\"bold\">\n                                    {\" \"}\n                                    Projetos\n                                </Text>\n                            </Heading>\n                        </Box>\n                    </Flex>\n\n                    <Flex justifyContent=\"center\">\n                        <Box\n                            maxW=\"450px\"\n                            textAlign=\"center\"\n                            color={useColorModeValue(\"#666\", \"#CCC\")}\n                            m={[\"15px\", \"0\"]}\n                        >\n                            <Text>\n                                Conheça meus projetos, que participei e\n                                desenvolvi\n                            </Text>\n                        </Box>\n                    </Flex>\n\n                    <Flex\n                        mt=\"30px\"\n                        justifyContent=\"center\"\n                        alignSelf=\"center\"\n                        flexWrap=\"wrap\"\n                        transition=\"0.2s\"\n                        maxW={[\"100%\", \"1450px\"]}\n                    >\n                        {projects.map((project, index) => (\n                            <ProjectCard\n                                key={\"servico\" + index}\n                                project={project}\n                            />\n                        ))}\n                    </Flex>\n                </Flex>\n            )}\n        </>\n    );\n};\n\nexport default ProjectsFeed;\n","import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { Box, Breadcrumb, BreadcrumbItem, Flex } from \"@chakra-ui/react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport * as React from \"react\";\n\nimport Layout from \"../../components/Layout\";\nimport SEO from \"../../components/Seo\";\nimport Projects from \"../../components/Projects\";\nimport { Project } from \"../../types\";\n\nfunction ProjectsFeed() {\n    const { allMarkdownRemark } = useStaticQuery(graphql`\n        {\n            site {\n                siteMetadata {\n                    title\n                }\n            }\n            allMarkdownRemark(\n                filter: {\n                    frontmatter: {\n                        layout: { eq: \"project\" }\n                        active: { eq: true }\n                    }\n                }\n                sort: { frontmatter: { date: ASC } }\n            ) {\n                nodes {\n                    id\n                    html\n                    frontmatter {\n                        layout\n                        description\n                        short_description\n                        icon\n                        link\n                        name\n                        title\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n    `);\n\n    const projects: Project[] = allMarkdownRemark.nodes.map((item) => {\n        let project: Project = {\n            icon: item.frontmatter.icon,\n            name: item.frontmatter.name,\n            description: item.frontmatter.description,\n            short_description: item.frontmatter.short_description,\n            category: item.frontmatter.category,\n            slug: item.slug,\n        };\n        return project;\n    });\n\n    return (\n        <Layout slide={{ index: 4, name: \"projetos\" }}>\n            <SEO\n                title={\"Projetos - Jorge.room\"}\n                description={\"Jorge - Conheça os projetos.\"}\n                lang=\"pt-BR\"\n            />\n\n            <Box\n                className=\"wrapper\"\n                mt=\"80px\"\n                mb=\"80px\"\n                p={[\"0 10px\", \"0 30px\", \"0 100px\"]}\n            >\n                {/* Breadcrumb e cabeçalho */}\n                <Flex flexDir=\"column\" mb=\"35px\">\n                    <Flex h=\"50px\" alignItems=\"center\">\n                        <Breadcrumb\n                            separator={<ChevronRightIcon color=\"gray.500\" />}\n                            fontWeight=\"medium\"\n                            fontSize=\"md\"\n                        >\n                            <BreadcrumbItem>\n                                <Link to=\"/#\">Início</Link>\n                            </BreadcrumbItem>\n                            <BreadcrumbItem isCurrentPage>\n                                <Link to=\"/#\">Projetos</Link>\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                    </Flex>\n                </Flex>\n                <Projects projects={projects} />\n            </Box>\n        </Layout>\n    );\n}\n\nexport default ProjectsFeed;\n","'use client';\nimport { createContext } from '@chakra-ui/utils';\n\nconst [BreadcrumbStylesProvider, useBreadcrumbStyles] = createContext({\n  name: `BreadcrumbStylesContext`,\n  errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Breadcrumb />\" `\n});\n\nexport { BreadcrumbStylesProvider, useBreadcrumbStyles };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbSeparator = forwardRef(\n  function BreadcrumbSeparator2(props, ref) {\n    const { spacing, ...rest } = props;\n    const styles = useBreadcrumbStyles();\n    const separatorStyles = defineStyle({\n      mx: spacing,\n      ...styles.separator\n    });\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ref,\n        role: \"presentation\",\n        ...rest,\n        __css: separatorStyles\n      }\n    );\n  }\n);\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\nexport { BreadcrumbSeparator };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { BreadcrumbLink } from './breadcrumb-link.mjs';\nimport { BreadcrumbSeparator } from './breadcrumb-separator.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbItem = forwardRef(\n  function BreadcrumbItem2(props, ref) {\n    const {\n      isCurrentPage,\n      separator,\n      isLastChild,\n      spacing,\n      children,\n      className,\n      ...rest\n    } = props;\n    const validChildren = getValidChildren(children);\n    const clones = validChildren.map((child) => {\n      if (child.type === BreadcrumbLink) {\n        return cloneElement(child, {\n          isCurrentPage\n        });\n      }\n      if (child.type === BreadcrumbSeparator) {\n        return cloneElement(child, {\n          spacing,\n          children: child.props.children || separator\n        });\n      }\n      return child;\n    });\n    const styles = useBreadcrumbStyles();\n    const itemStyles = defineStyle({\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      ...styles.item\n    });\n    const _className = cx(\"chakra-breadcrumb__list-item\", className);\n    return /* @__PURE__ */ jsxs(chakra.li, { ref, className: _className, ...rest, __css: itemStyles, children: [\n      clones,\n      !isLastChild && /* @__PURE__ */ jsx(BreadcrumbSeparator, { spacing, children: separator })\n    ] });\n  }\n);\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\n\nexport { BreadcrumbItem };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbLink = forwardRef(\n  function BreadcrumbLink2(props, ref) {\n    const { isCurrentPage, as, className, href, ...rest } = props;\n    const styles = useBreadcrumbStyles();\n    const sharedProps = {\n      ref,\n      as,\n      className: cx(\"chakra-breadcrumb__link\", className),\n      ...rest\n    };\n    if (isCurrentPage) {\n      return /* @__PURE__ */ jsx(chakra.span, { \"aria-current\": \"page\", __css: styles.link, ...sharedProps });\n    }\n    return /* @__PURE__ */ jsx(chakra.a, { __css: styles.link, href, ...sharedProps });\n  }\n);\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\nexport { BreadcrumbLink };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { BreadcrumbStylesProvider } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Breadcrumb = forwardRef(\n  function Breadcrumb2(props, ref) {\n    const styles = useMultiStyleConfig(\"Breadcrumb\", props);\n    const ownProps = omitThemingProps(props);\n    const {\n      children,\n      spacing = \"0.5rem\",\n      separator = \"/\",\n      className,\n      listProps,\n      ...rest\n    } = ownProps;\n    const validChildren = getValidChildren(children);\n    const count = validChildren.length;\n    const clones = validChildren.map(\n      (child, index) => cloneElement(child, {\n        separator,\n        spacing,\n        isLastChild: count === index + 1\n      })\n    );\n    const _className = cx(\"chakra-breadcrumb\", className);\n    return /* @__PURE__ */ jsx(\n      chakra.nav,\n      {\n        ref,\n        \"aria-label\": \"breadcrumb\",\n        className: _className,\n        __css: styles.container,\n        ...rest,\n        children: /* @__PURE__ */ jsx(BreadcrumbStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n          chakra.ol,\n          {\n            className: \"chakra-breadcrumb__list\",\n            ...listProps,\n            __css: {\n              display: \"flex\",\n              alignItems: \"center\",\n              ...styles.list\n            },\n            children: clones\n          }\n        ) })\n      }\n    );\n  }\n);\nBreadcrumb.displayName = \"Breadcrumb\";\n\nexport { Breadcrumb };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { chakra } from '../system/factory.mjs';\n\nconst StackItem = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__item\",\n    ...props,\n    __css: {\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"]\n    }\n  }\n);\nStackItem.displayName = \"StackItem\";\n\nexport { StackItem };\n","import { isObject } from './is.mjs';\n\nconst breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null);\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nconst isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport { arrayToObjectNotation, breakpoints, isCustomBreakpoint, isResponsiveObjectLike, mapResponsive, objectToArrayNotation };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { useMemo, cloneElement, Fragment } from 'react';\nimport { StackItem } from './stack-item.mjs';\nimport { getDividerStyles } from './stack.utils.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp ?? \"column\";\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction]\n  );\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */ jsx(StackItem, { children: child }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider)\n        return _child;\n      const clonedDivider = cloneElement(\n        divider,\n        {\n          __css: dividerStyle\n        }\n      );\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */ jsxs(Fragment, { children: [\n        _child,\n        _divider\n      ] }, key);\n    });\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children\n  ]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      display: \"flex\",\n      alignItems: align,\n      justifyContent: justify,\n      flexDirection: direction,\n      flexWrap: wrap,\n      gap: hasDivider ? void 0 : spacing,\n      className: _className,\n      ...rest,\n      children: clones\n    }\n  );\n});\nStack.displayName = \"Stack\";\n\nexport { Stack };\n","'use client';\nimport { mapResponsive } from '@chakra-ui/utils';\n\nfunction getDividerStyles(options) {\n  const { spacing, direction } = options;\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    }\n  };\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value) => dividerStyles[value]\n    )\n  };\n}\n\nexport { getDividerStyles };\n"],"names":["MotionStack","motion","Stack","ProjectCard","_ref","project","React","Link","to","slug","style","textDecoration","margin","borderRadius","w","h","overflow","position","textAlign","cursor","shadow","background","useColorModeValue","whileHover","scale","zIndex","transition","duration","type","bounce","Flex","flexDir","justifyContent","alignItems","color","icon","Image","src","alt","name","boxSize","minH","maxH","height","width","p","flexGrow","alignContent","Heading","fontFamily","fontWeight","fontSize","Box","Text","mt","pb","short_description","ChevronRightIcon","ProjectsFeed","allMarkdownRemark","useStaticQuery","projects","nodes","map","item","frontmatter","description","fields","category","tags","length","flexDirection","SunIcon","textTransform","m","size","as","maxW","alignSelf","flexWrap","index","key","Layout","slide","SEO","title","lang","className","mb","Breadcrumb","separator","BreadcrumbItem","isCurrentPage","Projects","BreadcrumbStylesProvider","useBreadcrumbStyles","errorMessage","BreadcrumbSeparator","props","ref","spacing","rest","styles","separatorStyles","mx","jsx","span","role","__css","displayName","isLastChild","children","clones","child","cloneElement","itemStyles","display","_className","cx","jsxs","li","BreadcrumbLink","href","sharedProps","link","a","ownProps","listProps","validChildren","count","nav","container","value","ol","list","StackItem","div","flex","minWidth","Object","freeze","isInline","direction","directionProp","align","justify","wrap","divider","shouldWrapChildren","dividerStyle","useMemo","options","dividerStyles","column","my","borderLeftWidth","borderBottomWidth","row","prop","mapper","Array","isArray","is","keys","reduce","result","getDividerStyles","hasDivider","shouldUseChildren","isLast","_child","clonedDivider","_divider","Fragment","gap"],"sourceRoot":""}