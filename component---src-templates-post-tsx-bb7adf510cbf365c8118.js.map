{"version":3,"file":"component---src-templates-post-tsx-bb7adf510cbf365c8118.js","mappings":"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","sources":["webpack://jorge.room/./src/templates/post.tsx","webpack://jorge.room/./node_modules/@chakra-ui/icons/dist/esm/ChevronLeft.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-context.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-separator.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-item.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb-link.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/breadcrumb/breadcrumb.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/h-stack.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack-item.mjs","webpack://jorge.room/./node_modules/@chakra-ui/utils/dist/esm/responsive.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack.mjs","webpack://jorge.room/./node_modules/@chakra-ui/react/dist/esm/stack/stack.utils.mjs"],"sourcesContent":["import { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n    Box,\n    Breadcrumb,\n    BreadcrumbItem,\n    BreadcrumbLink,\n    Flex,\n    Heading,\n    HStack,\n    Image,\n    Text,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { graphql, Link } from \"gatsby\";\nimport React from \"react\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\n// import { Container } from './styles';\n\nimport \"./markdown.css\";\n\nconst PostTemplate = ({ data }) => {\n    const post = data.markdownRemark;\n    // const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const { previous, next } = data;\n\n    return (\n        <Layout\n            slide={{ index: -1, name: `blog.post[${data.count.totalCount}]` }}\n        >\n            {post ? (\n                <>\n                    <SEO\n                        title={post.frontmatter.title}\n                        description={post.excerpt}\n                        lang=\"pt-BR\"\n                        image={`https://jorgenjr.netlify.app${post.frontmatter.cover}`}\n                        meta={[\n                            {\n                                name: \"og:url\",\n                                content: post.slug,\n                            },\n                            {\n                                name: \"twitter:title\",\n                                content:\n                                    \"Jorge's Room - \" + post.frontmatter.title,\n                            },\n                            {\n                                name: \"twitter:card\",\n                                content: \"summary_large_image\",\n                            },\n                        ]}\n                    />\n\n                    <Box\n                        className=\"wrapper\"\n                        mt=\"80px\"\n                        mb=\"80px\"\n                        p={[\"0 10px\", \"0 30px\", \"0 100px\"]}\n                    >\n                        {/* Breadcrumb e cabe√ßalho */}\n                        <Flex flexDir=\"column\" mb=\"35px\">\n                            <Flex h=\"50px\" alignItems=\"center\">\n                                <Breadcrumb\n                                    separator={\n                                        <ChevronRightIcon color=\"gray.500\" />\n                                    }\n                                    fontWeight=\"medium\"\n                                    fontSize=\"md\"\n                                >\n                                    <BreadcrumbItem>\n                                        <Link to=\"/#\">In√≠cio</Link>\n                                    </BreadcrumbItem>\n                                    <BreadcrumbItem>\n                                        <Link to=\"/blog\">Blog</Link>\n                                    </BreadcrumbItem>\n                                    <BreadcrumbItem isCurrentPage>\n                                        <BreadcrumbLink>\n                                            {post.frontmatter.title}\n                                        </BreadcrumbLink>\n                                    </BreadcrumbItem>\n                                </Breadcrumb>\n                            </Flex>\n                        </Flex>\n\n                        <Flex\n                            flexDir={[\"column\"]}\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                            maxW=\"800px\"\n                            m=\"auto\"\n                        >\n                            <Heading\n                                fontSize=\"xl\"\n                                color={useColorModeValue(\"#12466e\", \"#4a97ef\")}\n                                mb=\"10px\"\n                            >\n                                {post.frontmatter.title}\n                            </Heading>\n                            <Image\n                                alt={\n                                    \"Capa do informativo \" +\n                                    post.frontmatter.title\n                                }\n                                src={post.frontmatter.cover}\n                                borderRadius=\"md\"\n                                boxShadow=\"md\"\n                                mb=\"30px\"\n                                minH=\"350px\"\n                            />\n\n                            <div\n                                className=\"post-content-full\"\n                                dangerouslySetInnerHTML={{ __html: post.html }}\n                            />\n\n                            <Text\n                                textAlign=\"right\"\n                                fontSize=\"medium\"\n                                fontWeight=\"bolder\"\n                                mt=\"20px\"\n                                w=\"100%\"\n                            >\n                                {post.frontmatter.date}\n                            </Text>\n                        </Flex>\n                    </Box>\n\n                    <HStack w=\"100%\" justifyContent=\"space-around\" p=\"30px\">\n                        {next !== null ? (\n                            <Link to={next.fields.slug} rel=\"Anterior\">\n                                <Text textAlign=\"left\" ml=\"10px\">\n                                    Pr√≥ximo Post\n                                </Text>\n                                <Flex alignItems=\"center\">\n                                    <ChevronLeftIcon\n                                        boxSize=\"30px\"\n                                        color={useColorModeValue(\n                                            \"#053a63\",\n                                            \"#5c9fed\"\n                                        )}\n                                    />\n                                    {\"  \"}\n                                    <Text\n                                        as=\"span\"\n                                        height=\"30px\"\n                                        fontWeight=\"bolder\"\n                                        fontSize={[\"0.9rem\", \"1.1rem\"]}\n                                        display=\"flex\"\n                                        alignItems=\"center\"\n                                        color={useColorModeValue(\n                                            \"#053a63\",\n                                            \"#5c9fed\"\n                                        )}\n                                        paddingTop=\"2px\"\n                                        lineHeight=\"1\"\n                                    >\n                                        {next.frontmatter.title}\n                                    </Text>\n                                </Flex>\n                            </Link>\n                        ) : (\n                            <Box></Box>\n                        )}\n\n                        {previous !== null ? (\n                            <Link to={previous.fields.slug} rel=\"Pr√≥ximo\">\n                                <Text textAlign=\"right\" mr=\"10px\">\n                                    Post Anterior\n                                </Text>\n                                <Flex alignItems=\"center\">\n                                    <Text\n                                        as=\"span\"\n                                        height=\"30px\"\n                                        fontWeight=\"bolder\"\n                                        fontSize={[\"0.9rem\", \"1.1rem\"]}\n                                        display=\"flex\"\n                                        alignItems=\"center\"\n                                        color={useColorModeValue(\n                                            \"#053a63\",\n                                            \"#5c9fed\"\n                                        )}\n                                        paddingTop=\"2px\"\n                                        lineHeight=\"1\"\n                                    >\n                                        {previous.frontmatter.title}\n                                    </Text>\n                                    {\"  \"}\n                                    <ChevronRightIcon\n                                        boxSize=\"30px\"\n                                        color={useColorModeValue(\n                                            \"#053a63\",\n                                            \"#5c9fed\"\n                                        )}\n                                    />\n                                </Flex>\n                            </Link>\n                        ) : (\n                            <Box></Box>\n                        )}\n                    </HStack>\n                </>\n            ) : null}\n        </Layout>\n    );\n};\n\nexport default PostTemplate;\n\nexport const pageQuery = graphql`\n    query Post(\n        $id: String!\n        $date: Date\n        $previousPostId: String\n        $nextPostId: String\n    ) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            html\n            excerpt(format: PLAIN, pruneLength: 250)\n            frontmatter {\n                cover\n                date(formatString: \"DD/MM/YYYY HH:mm\")\n                isBanner\n                layout\n                special\n                title\n            }\n            fields {\n                slug\n            }\n        }\n        count: allMarkdownRemark(\n            filter: { frontmatter: { date: { lt: $date } } }\n        ) {\n            totalCount\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`;\n","import { createIcon } from '@chakra-ui/react';\n\nconst ChevronLeftIcon = createIcon({\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\",\n  displayName: \"ChevronLeftIcon\"\n});\n\nexport { ChevronLeftIcon };\n","'use client';\nimport { createContext } from '@chakra-ui/utils';\n\nconst [BreadcrumbStylesProvider, useBreadcrumbStyles] = createContext({\n  name: `BreadcrumbStylesContext`,\n  errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Breadcrumb />\" `\n});\n\nexport { BreadcrumbStylesProvider, useBreadcrumbStyles };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbSeparator = forwardRef(\n  function BreadcrumbSeparator2(props, ref) {\n    const { spacing, ...rest } = props;\n    const styles = useBreadcrumbStyles();\n    const separatorStyles = defineStyle({\n      mx: spacing,\n      ...styles.separator\n    });\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ref,\n        role: \"presentation\",\n        ...rest,\n        __css: separatorStyles\n      }\n    );\n  }\n);\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\nexport { BreadcrumbSeparator };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { defineStyle } from '@chakra-ui/styled-system';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { BreadcrumbLink } from './breadcrumb-link.mjs';\nimport { BreadcrumbSeparator } from './breadcrumb-separator.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbItem = forwardRef(\n  function BreadcrumbItem2(props, ref) {\n    const {\n      isCurrentPage,\n      separator,\n      isLastChild,\n      spacing,\n      children,\n      className,\n      ...rest\n    } = props;\n    const validChildren = getValidChildren(children);\n    const clones = validChildren.map((child) => {\n      if (child.type === BreadcrumbLink) {\n        return cloneElement(child, {\n          isCurrentPage\n        });\n      }\n      if (child.type === BreadcrumbSeparator) {\n        return cloneElement(child, {\n          spacing,\n          children: child.props.children || separator\n        });\n      }\n      return child;\n    });\n    const styles = useBreadcrumbStyles();\n    const itemStyles = defineStyle({\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      ...styles.item\n    });\n    const _className = cx(\"chakra-breadcrumb__list-item\", className);\n    return /* @__PURE__ */ jsxs(chakra.li, { ref, className: _className, ...rest, __css: itemStyles, children: [\n      clones,\n      !isLastChild && /* @__PURE__ */ jsx(BreadcrumbSeparator, { spacing, children: separator })\n    ] });\n  }\n);\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\n\nexport { BreadcrumbItem };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useBreadcrumbStyles } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst BreadcrumbLink = forwardRef(\n  function BreadcrumbLink2(props, ref) {\n    const { isCurrentPage, as, className, href, ...rest } = props;\n    const styles = useBreadcrumbStyles();\n    const sharedProps = {\n      ref,\n      as,\n      className: cx(\"chakra-breadcrumb__link\", className),\n      ...rest\n    };\n    if (isCurrentPage) {\n      return /* @__PURE__ */ jsx(chakra.span, { \"aria-current\": \"page\", __css: styles.link, ...sharedProps });\n    }\n    return /* @__PURE__ */ jsx(chakra.a, { __css: styles.link, href, ...sharedProps });\n  }\n);\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\nexport { BreadcrumbLink };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { BreadcrumbStylesProvider } from './breadcrumb-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Breadcrumb = forwardRef(\n  function Breadcrumb2(props, ref) {\n    const styles = useMultiStyleConfig(\"Breadcrumb\", props);\n    const ownProps = omitThemingProps(props);\n    const {\n      children,\n      spacing = \"0.5rem\",\n      separator = \"/\",\n      className,\n      listProps,\n      ...rest\n    } = ownProps;\n    const validChildren = getValidChildren(children);\n    const count = validChildren.length;\n    const clones = validChildren.map(\n      (child, index) => cloneElement(child, {\n        separator,\n        spacing,\n        isLastChild: count === index + 1\n      })\n    );\n    const _className = cx(\"chakra-breadcrumb\", className);\n    return /* @__PURE__ */ jsx(\n      chakra.nav,\n      {\n        ref,\n        \"aria-label\": \"breadcrumb\",\n        className: _className,\n        __css: styles.container,\n        ...rest,\n        children: /* @__PURE__ */ jsx(BreadcrumbStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n          chakra.ol,\n          {\n            className: \"chakra-breadcrumb__list\",\n            ...listProps,\n            __css: {\n              display: \"flex\",\n              alignItems: \"center\",\n              ...styles.list\n            },\n            children: clones\n          }\n        ) })\n      }\n    );\n  }\n);\nBreadcrumb.displayName = \"Breadcrumb\";\n\nexport { Breadcrumb };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { Stack } from './stack.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\n\nconst HStack = forwardRef((props, ref) => /* @__PURE__ */ jsx(Stack, { align: \"center\", ...props, direction: \"row\", ref }));\nHStack.displayName = \"HStack\";\n\nexport { HStack };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { chakra } from '../system/factory.mjs';\n\nconst StackItem = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__item\",\n    ...props,\n    __css: {\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"]\n    }\n  }\n);\nStackItem.displayName = \"StackItem\";\n\nexport { StackItem };\n","import { isObject } from './is.mjs';\n\nconst breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null);\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nconst isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport { arrayToObjectNotation, breakpoints, isCustomBreakpoint, isResponsiveObjectLike, mapResponsive, objectToArrayNotation };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { getValidChildren, cx } from '@chakra-ui/utils';\nimport { useMemo, cloneElement, Fragment } from 'react';\nimport { StackItem } from './stack-item.mjs';\nimport { getDividerStyles } from './stack.utils.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp ?? \"column\";\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction]\n  );\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */ jsx(StackItem, { children: child }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider)\n        return _child;\n      const clonedDivider = cloneElement(\n        divider,\n        {\n          __css: dividerStyle\n        }\n      );\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */ jsxs(Fragment, { children: [\n        _child,\n        _divider\n      ] }, key);\n    });\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children\n  ]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      display: \"flex\",\n      alignItems: align,\n      justifyContent: justify,\n      flexDirection: direction,\n      flexWrap: wrap,\n      gap: hasDivider ? void 0 : spacing,\n      className: _className,\n      ...rest,\n      children: clones\n    }\n  );\n});\nStack.displayName = \"Stack\";\n\nexport { Stack };\n","'use client';\nimport { mapResponsive } from '@chakra-ui/utils';\n\nfunction getDividerStyles(options) {\n  const { spacing, direction } = options;\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0\n    }\n  };\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value) => dividerStyles[value]\n    )\n  };\n}\n\nexport { getDividerStyles };\n"],"names":["_ref","data","post","markdownRemark","previous","next","React","Layout","slide","index","name","count","totalCount","SEO","title","frontmatter","description","excerpt","lang","image","cover","meta","content","slug","Box","className","mt","mb","p","Flex","flexDir","h","alignItems","Breadcrumb","separator","ChevronRightIcon","color","fontWeight","fontSize","BreadcrumbItem","Link","to","isCurrentPage","BreadcrumbLink","justifyContent","maxW","m","Heading","useColorModeValue","Image","alt","src","borderRadius","boxShadow","minH","dangerouslySetInnerHTML","__html","html","Text","textAlign","w","date","HStack","fields","rel","ml","ChevronLeftIcon","boxSize","as","height","display","paddingTop","lineHeight","mr","d","displayName","BreadcrumbStylesProvider","useBreadcrumbStyles","errorMessage","BreadcrumbSeparator","props","ref","spacing","rest","styles","separatorStyles","mx","jsx","span","role","__css","isLastChild","children","clones","map","child","type","cloneElement","itemStyles","item","_className","cx","jsxs","li","href","sharedProps","link","a","ownProps","listProps","validChildren","length","nav","container","value","ol","list","align","direction","StackItem","div","flex","minWidth","Object","freeze","Stack","isInline","directionProp","justify","wrap","divider","shouldWrapChildren","dividerStyle","useMemo","options","dividerStyles","column","my","borderLeftWidth","borderBottomWidth","row","prop","mapper","Array","isArray","is","keys","reduce","result","key","getDividerStyles","hasDivider","shouldUseChildren","isLast","_child","clonedDivider","_divider","Fragment","flexDirection","flexWrap","gap"],"sourceRoot":""}